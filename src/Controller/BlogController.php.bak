<?php

namespace App\Controller;

use App\Entity\Comment;
use App\Entity\Post;
use App\Entity\BlogRating;
use App\Form\CommentFormType;
use App\Form\PostFormType;
use App\Repository\ActivitiesRepository;
use App\Repository\CommentRepository;
use App\Repository\PostRepository;
use App\Repository\BlogRatingRepository;
use App\Repository\UsersRepository;
use App\Service\GeminiAIService;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Bridge\Doctrine\Attribute\MapEntity;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class BlogController extends AbstractController
{
    private $entityManager;
    private $postRepository;
    private $activitiesRepository;
    private $commentRepository;
    private $usersRepository;
    private $blogRatingRepository;
    private $security;
    private $httpClient;
    private $logger;
    private $geminiService;

    public function __construct(
        EntityManagerInterface $entityManager,
        PostRepository $postRepository,
        ActivitiesRepository $activitiesRepository,
        CommentRepository $commentRepository,
        UsersRepository $usersRepository,
        BlogRatingRepository $blogRatingRepository,
        Security $security,
        HttpClientInterface $httpClient = null,
        LoggerInterface $logger = null,
        GeminiAIService $geminiService = null
    ) {
        $this->entityManager = $entityManager;
        $this->postRepository = $postRepository;
        $this->activitiesRepository = $activitiesRepository;
        $this->commentRepository = $commentRepository;
        $this->usersRepository = $usersRepository;
        $this->blogRatingRepository = $blogRatingRepository;
        $this->security = $security;
        $this->httpClient = $httpClient;
        $this->logger = $logger;
        $this->geminiService = $geminiService;
    }

    #[Route('/blog', name: 'app_blog_index')]
    public function index(Request $request): Response
    {
        // Get filters
        $activityId = $request->query->get('activityId');
        
        // Get pagination parameters
        $page = $request->query->getInt('page', 1);
        $limit = 6; // Number of blog posts per page
        
        $currentUser = $this->security->getUser();
        $userId = $currentUser ? $currentUser->getId() : null;
        
        // Apply filters
        $criteria = [];
        
        if ($activityId) {
            $criteria['activityId'] = $activityId;
        }
        
        // Count total posts for pagination
        $totalPosts = $this->postRepository->count($criteria);
        $maxPages = ceil($totalPosts / $limit);
        
        // Get filtered posts with pagination
        $posts = $this->postRepository->findBy(
            $criteria, 
            ['date' => 'DESC'],
            $limit,
            ($page - 1) * $limit
        );

        // Get users for displaying author names
        $userIds = array_map(function($post) {
            return $post->getUserId();
        }, $posts);

        $users = $this->usersRepository->findBy(['id' => array_unique($userIds)]);
        $usersById = [];
        foreach ($users as $user) {
            $usersById[$user->getId()] = $user;
        }

        // Extract activity IDs from posts, making sure to filter out nulls and zeros
        $postActivityIds = array_filter(array_map(function($post) {
            $id = $post->getActivityId();
            return ($id !== null && $id > 0) ? $id : null;
        }, $posts));
        
        // First get all activities for the filter dropdown
        $allActivities = $this->activitiesRepository->findAll();
        
        // Create indexed arrays of activities
        $activitiesById = [];
        $activitiesByIdString = []; // For string keys since Twig might convert integers to strings
        
        // First add all activities to the arrays
        foreach ($allActivities as $activity) {
            $id = $activity->getId();
            $activitiesById[$id] = $activity;
            $activitiesByIdString[(string)$id] = $activity;
        }
        
        // Now ensure we have all activities referenced by posts
        if (!empty($postActivityIds)) {
            $postRelatedActivities = $this->activitiesRepository->findBy(['id' => array_values($postActivityIds)]);
            foreach ($postRelatedActivities as $activity) {
                $id = $activity->getId();
                $activitiesById[$id] = $activity;
                $activitiesByIdString[(string)$id] = $activity;
            }
        }
        
        // Create an array with direct activity destinations for each post
        $postDestinations = [];
        foreach ($posts as $post) {
            $activityId = $post->getActivityId();
            if ($activityId && isset($activitiesById[$activityId])) {
                $postDestinations[$post->getId()] = $activitiesById[$activityId]->getActivityDestination();
            } else {
                $postDestinations[$post->getId()] = null;
            }
        }
        
        // Get rating statistics for all posts
        $ratingStats = [];
        foreach ($posts as $post) {
            $ratings = $this->blogRatingRepository->findBy(['postId' => $post->getId()]);
            $likes = 0;
            $dislikes = 0;
            foreach ($ratings as $rating) {
                if ($rating->isLike()) {
                    $likes++;
                } else {
                    $dislikes++;
                }
            }
            $ratingStats[$post->getId()] = [
                'likes' => $likes,
                'dislikes' => $dislikes
            ];
        }

        return $this->render('client/Blog/index.html.twig', [
            'posts' => $posts,
            'users' => $usersById,
            'activities' => $allActivities,
            'activitiesById' => $activitiesById,
            'activitiesByIdString' => $activitiesByIdString,
            'postDestinations' => $postDestinations,
            'ratingStats' => $ratingStats,
            'selectedActivityId' => $activityId,
            'currentUserId' => $userId,
            'current_page' => $page,
            'max_pages' => $maxPages,
            'total_items' => $totalPosts,
            'items_per_page' => $limit
        ]);
    }

    #[Route('/publicator/blog', name: 'app_publicator_blog_index')]
    public function publicatorBlogIndex(Request $request): Response
    {
        // Check if user is logged in and has Publicitaire role
        $user = $this->security->getUser();
        if (!$user || $user->getRole() !== 'Publicitaire') {
            return $this->redirectToRoute('app_login');
        }
        
        // Get pagination parameters
        $page = $request->query->getInt('page', 1);
        $limit = 10; // Number of blog posts per page in admin view
        
        // Get only blog posts created by this publicator
        $criteria = ['userId' => $user->getId()];
        
        // Count total posts for pagination
        $totalPosts = $this->postRepository->count($criteria);
        $maxPages = ceil($totalPosts / $limit);
        
        // Get filtered posts with pagination
        $posts = $this->postRepository->findBy(
            $criteria, 
            ['date' => 'DESC'],
            $limit,
            ($page - 1) * $limit
        );

        // Get activities for displaying activity details
        $activityIds = array_map(function($post) {
            return $post->getActivityId();
        }, $posts);
        
        $activities = $this->activitiesRepository->findBy(['id' => array_unique($activityIds)]);
        $activitiesById = [];
        foreach ($activities as $activity) {
            $activitiesById[$activity->getId()] = $activity;
        }
        
        // Get comment counts for each post
        $commentCounts = [];
        foreach ($posts as $post) {
            $commentCounts[$post->getId()] = $this->commentRepository->count(['postId' => $post->getId()]);
        }
        
        // Get total likes for all of the publicator's posts
        $totalLikes = 0;
        $allUserPosts = $this->postRepository->findBy(['userId' => $user->getId()]);
        foreach ($allUserPosts as $post) {
            $ratings = $this->blogRatingRepository->findBy(['postId' => $post->getId()]);
            foreach ($ratings as $rating) {
                if ($rating->isLike()) {
                    $totalLikes++;
                }
            }
        }
        
        // Return the dashboard template
        return $this->render('publicator/blog/list.html.twig', [
            'posts' => $posts,
            'activities' => $activitiesById,
            'commentCounts' => $commentCounts,
            'totalLikes' => $totalLikes,
            'current_page' => $page,
            'max_pages' => $maxPages,
            'total_items' => $totalPosts,
            'items_per_page' => $limit
        ]);
    }

    #[Route('/blog/details/{id}', name: 'app_blog_details')]
    public function details(Request $request, int $id): Response
    {
        $post = $this->postRepository->find($id);
        if (!$post) {
            throw $this->createNotFoundException('Post not found');
        }

        // Get post author
        $author = $this->usersRepository->find($post->getUserId());

        // Get activity
        $activity = $this->activitiesRepository->find($post->getActivityId());
        
        // Get resources (images) for the activity
        $resources = [];
        if ($activity) {
            $resources = $activity->getResources();
        }
        
        // Check if current user is the author of the post
        $currentUser = $this->security->getUser();
        $isAuthor = false;
        if ($currentUser && $currentUser->getId() === $post->getUserId()) {
            $isAuthor = true;
        }
        
        // Get post comments
        $comments = $this->commentRepository->findBy(
            ['postId' => $post->getId()],
            ['date' => 'DESC']
        );
        
        // Get user info for each comment
        $commentUserIds = array_map(function($comment) {
            return $comment->getUserId();
        }, $comments);
        
        $commentUsers = $this->usersRepository->findBy(['id' => array_unique($commentUserIds)]);
        $commentUsersById = [];
        foreach ($commentUsers as $user) {
            $commentUsersById[$user->getId()] = $user;
        }
        
        // Create edit forms for comments
        $editForms = [];
        foreach ($comments as $comment) {
            $editForm = $this->createForm(CommentFormType::class, $comment, [
                'action' => $this->generateUrl('app_comment_edit', ['id' => $comment->getId()]),
                'method' => 'POST',
            ]);
            $editForms[$comment->getId()] = $editForm->createView();
        }
        
        // Create comment form for adding new comment
        $comment = new Comment();
        $comment->setPostId($post->getId());
        if ($currentUser) {
            $comment->setUserId($currentUser->getId());
        }
        
        $commentForm = $this->createForm(CommentFormType::class, $comment, [
            'action' => $this->generateUrl('app_comment_new', ['postId' => $post->getId()]),
            'method' => 'POST',
        ]);
        
        // Get related posts (same activity)
        $relatedPosts = $this->postRepository->findBy(
            [
                'activityId' => $post->getActivityId(),
            ],
            ['date' => 'DESC'],
            3  // Limit to 3 related posts
        );
        
        // Remove current post from related posts list
        foreach ($relatedPosts as $key => $relatedPost) {
            if ($relatedPost->getId() === $post->getId()) {
                unset($relatedPosts[$key]);
                break;
            }
        }
        
        // Get rating statistics
        $ratings = $this->blogRatingRepository->findBy(['postId' => $post->getId()]);
        $likesCount = 0;
        $dislikesCount = 0;
        $userRating = null;
        
        foreach ($ratings as $rating) {
            if ($rating->isLike()) {
                $likesCount++;
            } else {
                $dislikesCount++;
            }
            
            // Check if current user has rated this post
            if ($currentUser && $rating->getUserId() === $currentUser->getId()) {
                $userRating = $rating->isLike() ? 'like' : 'dislike';
            }
        }
        
        return $this->render('client/Blog/details.html.twig', [
            'post' => $post,
            'author' => $author,
            'activity' => $activity,
            'resources' => $resources,
            'comments' => $comments,
            'commentUsers' => $commentUsersById,
            'commentForm' => $commentForm->createView(),
            'editForms' => $editForms,
            'isAuthor' => $isAuthor,
            'likesCount' => $likesCount,
            'dislikesCount' => $dislikesCount,
            'userRating' => $userRating,
            'relatedPosts' => $relatedPosts
        ]);
    }

    #[Route('/publicator/blog/add', name: 'app_blog_add')]
    public function addBlog(Request $request, SluggerInterface $slugger): Response
    {
        // Check if user is logged in and has Publicitaire role
        $user = $this->security->getUser();
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Check if user has Publicitaire role
        if ($user->getRole() !== 'Publicitaire') {
            $this->addFlash('error', 'Only Publicitaire users can create blog posts.');
            return $this->redirectToRoute('app_blog_index');
        }
        
        // Check the referer to determine if we should use the dashboard template
        $referer = $request->headers->get('referer');
        $useDashboardTemplate = $referer && strpos($referer, '/publicator') !== false;
        
        // Create a new post
        $post = new Post();
        $post->setUserId($user->getId());
        
        // Get activities for the dropdown
        $activities = $this->activitiesRepository->findAll();
        $activitiesChoices = [];
        foreach ($activities as $activity) {
            $activitiesChoices[$activity->getActivityName()] = $activity->getId();
        }
        
        // Create form
        $form = $this->createForm(PostFormType::class, $post, [
            'activities_choices' => $activitiesChoices,
            'image_required' => true,
        ]);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            // Handle file upload
            $pictureFile = $form->get('picture')->getData();
            
            if ($pictureFile) {
                $originalFilename = pathinfo($pictureFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$pictureFile->guessExtension();
                
                try {
                    $pictureFile->move(
                        $this->getParameter('posts_directory'),
                        $newFilename
                    );
                    $post->setPicture($newFilename);
                } catch (FileException $e) {
                    $this->addFlash('error', 'There was an error uploading your image.');
                    return $this->redirectToRoute('app_blog_add');
                }
            }
            
            // Set the date
            $post->setDate(new \DateTime());
            
            // Save to database
            $this->entityManager->persist($post);
            $this->entityManager->flush();
            
            // Set a success flag in the session for SweetAlert
            $request->getSession()->set('blog_created', true);
            return $this->redirectToRoute('app_publicator_blog_index');
        }
        
        // Always use the dashboard-style template for a consistent experience
        return $this->render('publicator/blog/add.html.twig', [
            'form' => $form->createView(),
            'activities' => $activities
        ]);
    }

    #[Route('/publicator/blog/edit/{id}', name: 'app_blog_edit')]
    public function editBlog(Request $request, int $id, SluggerInterface $slugger): Response
    {
        // Check if user is logged in
        $user = $this->security->getUser();
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Get the post
        $post = $this->postRepository->find($id);
        if (!$post) {
            throw $this->createNotFoundException('Post not found');
        }
        
        // Check if the current user is the author
        if ($post->getUserId() !== $user->getId()) {
            $this->addFlash('error', 'You can only edit your own posts.');
            return $this->redirectToRoute('app_blog_details', ['id' => $id]);
        }
        
        // Get activities for the dropdown
        $activities = $this->activitiesRepository->findAll();
        $activitiesChoices = [];
        foreach ($activities as $activity) {
            $activitiesChoices[$activity->getActivityName()] = $activity->getId();
        }
        
        // Create form
        $form = $this->createForm(PostFormType::class, $post, [
            'activities_choices' => $activitiesChoices,
            'image_required' => false,
        ]);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            // Handle file upload
            $pictureFile = $form->get('picture')->getData();
            
            if ($pictureFile) {
                $originalFilename = pathinfo($pictureFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$pictureFile->guessExtension();
                
                try {
                    $pictureFile->move(
                        $this->getParameter('posts_directory'),
                        $newFilename
                    );
                    
                    // Delete old picture if exists
                    $oldPicture = $post->getPicture();
                    if ($oldPicture) {
                        $oldPicturePath = $this->getParameter('posts_directory').'/'.$oldPicture;
                        if (file_exists($oldPicturePath)) {
                            unlink($oldPicturePath);
                        }
                    }
                    
                    $post->setPicture($newFilename);
                } catch (FileException $e) {
                    $this->addFlash('error', 'There was an error uploading your image.');
                    return $this->redirectToRoute('app_blog_edit', ['id' => $id]);
                }
            }
            
            // Save to database
            $this->entityManager->flush();
            
            // Set a success flag in the session for SweetAlert
            $request->getSession()->set('blog_updated', true);
            return $this->redirectToRoute('app_publicator_blog_index');
        }
        
        // Use the dashboard-style template for a consistent experience
        return $this->render('publicator/blog/edit.html.twig', [
            'form' => $form->createView(),
            'post' => $post,
            'activities' => $activities,
        ]);
    }

    #[Route('/publicator/blog/delete/{id}', name: 'app_blog_delete')]
    public function deleteBlog(int $id): Response
    {
        // Check if user is logged in
        $user = $this->security->getUser();
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        $post = $this->postRepository->find($id);
        if (!$post) {
            throw $this->createNotFoundException('Post not found');
        }
        
        // Check if the current user is the author
        if ($post->getUserId() !== $user->getId()) {
            $this->addFlash('error', 'You can only delete your own posts.');
            return $this->redirectToRoute('app_blog_details', ['id' => $id]);
        }

        // Delete post comments
        $comments = $this->commentRepository->findBy(['postId' => $id]);
        foreach ($comments as $comment) {
            $this->entityManager->remove($comment);
        }

        // Delete post ratings
        $ratings = $this->blogRatingRepository->findBy(['postId' => $id]);
        foreach ($ratings as $rating) {
            $this->entityManager->remove($rating);
        }

        // Delete post picture if it exists
        $picture = $post->getPicture();
        if ($picture) {
            $picturePath = $this->getParameter('posts_directory').'/'.$picture;
            if (file_exists($picturePath)) {
                unlink($picturePath);
            }
        }

        // Delete the post
        $this->entityManager->remove($post);
        $this->entityManager->flush();
        
        // Set a session flag for SweetAlert instead of flash message
        $this->get('session')->set('blog_deleted', true);
    
    // Redirect to publicator blog index if the user is a publicator
    if ($user->getRole() === 'Publicitaire') {
        return $this->redirectToRoute('app_publicator_blog_index');
    }
    
    return $this->redirectToRoute('app_blog_index');
    }

    #[Route('/blog/rate/{id}/{type}', name: 'app_blog_rate')]
    public function rateBlog(int $id, string $type, Request $request): Response
    {
        // Check if user is logged in
        $user = $this->security->getUser();
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Check if post exists
        $post = $this->postRepository->find($id);
        if (!$post) {
            throw $this->createNotFoundException('Post not found');
        }
        
        // Validate rating type
        if (!in_array($type, ['like', 'dislike'])) {
            throw $this->createNotFoundException('Invalid rating type');
        }
        
        // Check if user has already rated this post
        $existingRating = $this->blogRatingRepository->findOneBy([
            'userId' => $user->getId(),
            'postId' => $id
        ]);
        
        $isLike = ($type === 'like');
        
        if ($existingRating) {
            // User already rated, update rating
            if ($existingRating->isLike() === $isLike) {
                // User clicked same rating again, remove rating
                $this->entityManager->remove($existingRating);
            } else {
                // User changed rating
                $existingRating->setIsLike($isLike);
                $existingRating->setUpdatedAt(new \DateTime());
            }
        } else {
            // User has not rated, create new rating
            $rating = new BlogRating();
            $rating->setUserId($user->getId());
            $rating->setPostId($id);
            $rating->setIsLike($isLike);
            
            $this->entityManager->persist($rating);
        }
        
        $this->entityManager->flush();
        
        // Handle AJAX requests
        if ($request->isXmlHttpRequest()) {
            // Get updated counts
            $ratings = $this->blogRatingRepository->findBy(['postId' => $id]);
            $likesCount = 0;
            $dislikesCount = 0;
            $userRating = null;
            
            foreach ($ratings as $rating) {
                if ($rating->isLike()) {
                    $likesCount++;
                } else {
                    $dislikesCount++;
                }
                
                if ($rating->getUserId() === $user->getId()) {
                    $userRating = $rating->isLike() ? 'like' : 'dislike';
                }
            }
            
            return new JsonResponse([
                'likes' => $likesCount,
                'dislikes' => $dislikesCount,
                'userRating' => $userRating
            ]);
        }
        // Redirect back to post details page
        return $this->redirectToRoute('app_blog_details', ['id' => $id]);
    }

    #[Route('/publicator/blog/generate-content', name: 'app_blog_generate_content', methods: ['POST'])]
    public function generateContent(Request $request): JsonResponse
    {
        // Check if user is logged in
        $user = $this->security->getUser();
        if (!$user) {
            return new JsonResponse(['error' => 'You must be logged in'], Response::HTTP_UNAUTHORIZED);
        }
        
        // Get the activity ID from the request
        $activityId = $request->request->get('activityId');
        if (!$activityId) {
            return new JsonResponse(['error' => 'Activity ID is required'], Response::HTTP_BAD_REQUEST);
        }
        
        // Get the activity
        $activity = $this->activitiesRepository->find($activityId);
        if (!$activity) {
            return new JsonResponse(['error' => 'Activity not found'], Response::HTTP_NOT_FOUND);
        }
        
        // Get the uploaded image if available
        $image = $request->files->get('image');
        
        // Use our GeminiAIService to generate content
        if ($this->geminiService) {
            try {
                $generatedContent = $this->geminiService->generateBlogContent(
                    $activity->getActivityName(),
                    $activity->getActivityDestination() ?? 'unknown location',
                    $image
                );
                
                if ($generatedContent) {
                    return new JsonResponse(['content' => $generatedContent]);
                }
            } catch (\Exception $e) {
                $this->logger?->warning("Error with Gemini AI service", [
                    'error' => $e->getMessage(),
                    'activity' => $activity->getActivityName()
                ]);
            }
        }
        
        // If Gemini service fails or doesn't exist, try fallback services
        $generatedContent = null;
        $lastError = null;
        
        // Define fallback content generation services
        $fallbackServices = [
            'huggingface' => function() use ($activity) {
                return $this->generateWithHuggingFace($activity);
            },
            'localai' => function() use ($activity) {
                return $this->generateWithLocalAI($activity);
            }
        ];
        
        // Try each fallback service until one succeeds
        if ($this->httpClient) {
            foreach ($fallbackServices as $serviceName => $serviceFunction) {
                try {
                    $generatedContent = $serviceFunction();
                    if ($generatedContent) {
                        break;
                    }
                } catch (\Exception $e) {
                    $lastError = $e->getMessage();
                    $this->logger?->warning("Error with $serviceName service", [
                        'error' => $lastError,
                        'activity' => $activity->getActivityName()
                    ]);
                }
            }
        }
        
        if ($generatedContent) {
            return new JsonResponse(['content' => $generatedContent]);
        }
        
        // If all services failed
        return new JsonResponse([
            'error' => 'Failed to generate content',
            'details' => $lastError
        ], Response::HTTP_SERVICE_UNAVAILABLE);
    }
    
    // Helper methods for AI content generation
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
        
        return null;
    }
    
    private function generateWithHuggingFace($activity)
    {
        if (!$this->httpClient) {
            return null;
        }
        
        $apiKey = $this->getParameter('huggingface_api_key');
        if (!$apiKey) {
            $this->logger?->warning('HuggingFace API key not configured');
            return null;
        }
        
        $endpoint = 'https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2';
        
        try {
            $response = $this->httpClient->request('POST', $endpoint, [
                'headers' => [
                    'Authorization' => 'Bearer ' . $apiKey,
                    'Content-Type' => 'application/json',
                ],
                'json' => [
                    'inputs' => 'Write a detailed blog post about a ' . $activity->getActivityName() . ' experience. Include what makes this activity special, what to expect, and some tips for travelers. Format the response in HTML with appropriate headings, paragraphs, and occasional emphasis.',
                    'parameters' => [
                        'max_new_tokens' => 1000,
                        'temperature' => 0.7
                    ]
                ]
            ]);
            
            $statusCode = $response->getStatusCode();
            if ($statusCode === 200) {
                $data = $response->toArray();
                if (isset($data[0]['generated_text'])) {
                    return $data[0]['generated_text'];
                }
            } else {
                $this->logger?->warning('HuggingFace returned non-200 status', [
                    'endpoint' => $endpoint,
                    'status' => $statusCode,
                    'response' => $response->getContent(false)
                ]);
            }
        } catch (\Exception $e) {
            $this->logger?->warning('Exception when calling HuggingFace', [
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
        
        return null;
    }
    
    private function generateWithLocalAI($activity)
    {
        if (!$this->httpClient) {
            return null;
        }
        
        $endpoint = $this->getParameter('localai_endpoint');
        if (!$endpoint) {
            $this->logger?->warning('LocalAI endpoint not configured');
            return null;
        }
        
        try {
            $response = $this->httpClient->request('POST', $endpoint, [
                'json' => [
                    'model' => 'mistral',
                    'prompt' => 'Write a detailed blog post about a ' . $activity->getActivityName() . ' experience. Include what makes this activity special, what to expect, and some tips for travelers. Format the response in HTML with appropriate headings, paragraphs, and occasional emphasis.',
                    'max_tokens' => 1000,
                    'temperature' => 0.7
                ]
            ]);
            
            $statusCode = $response->getStatusCode();
            if ($statusCode === 200) {
                $data = $response->toArray();
                if (isset($data['choices'][0]['text'])) {
                    return $data['choices'][0]['text'];
                }
            } else {
                $lastError = "Received status code {$statusCode} from {$endpoint}";
                $this->logger?->warning('API returned non-200 status', [
                    'endpoint' => $endpoint,
                    'status' => $statusCode,
                    'response' => $response->getContent(false)
                ]);
            }
        } catch (\Exception $e) {
            $lastError = $e->getMessage();
            $this->logger?->warning('Exception when calling LocalAI', [
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
        
        return null;
    }
}
