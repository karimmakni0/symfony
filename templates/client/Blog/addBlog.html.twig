{% extends 'base.html.twig' %}

{% block title %}Create New Blog Post{% endblock %}

{% block body %}
<section class="layout-pt-md layout-pb-md">
  <div class="container">
    <div class="row justify-center">
      <div class="col-xl-8 col-lg-10">
        <div class="px-50 py-50 sm:px-20 sm:py-20 bg-white shadow-4 rounded-4">
          <div class="row y-gap-20">
            <div class="col-12">
              <h1 class="text-22 fw-500">Create New Blog Post</h1>
              <p class="mt-10">Share your thoughts and experiences about our activities</p>
            </div>

            <div class="col-12">
              {% for label, messages in app.flashes %}
                {% for message in messages %}
                  <div class="alert {% if label == 'success' %}alert-success{% else %}alert-danger{% endif %} mb-20">
                    <div class="px-20 py-15 bg-{% if label == 'success' %}green-1{% else %}red-1{% endif %} rounded-4">
                      <h5 class="text-white fw-500">{{ message }}</h5>
                    </div>
                  </div>
                {% endfor %}
              {% endfor %}
            </div>

            <div class="col-12">
              {{ form_start(form, {'attr': {'class': 'row y-gap-20', 'enctype': 'multipart/form-data', 'id': 'blog-form'}}) }}
                <div class="col-12">
                  <div class="form-input">
                    {{ form_widget(form.title) }}
                    {{ form_label(form.title, 'Title *', {'label_attr': {'class': 'lh-1 text-16 text-light-1'}}) }}
                    <div class="text-danger mt-5">
                      {{ form_errors(form.title) }}
                    </div>
                  </div>
                </div>

                <div class="col-12">
                  <div class="form-input">
                    {{ form_label(form.activityId, 'Select Activity *', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                    {{ form_widget(form.activityId, {'attr': {'class': 'form-select', 'id': 'activity-select'}}) }}
                    <div class="text-danger mt-5">
                      {{ form_errors(form.activityId) }}
                    </div>
                  </div>
                </div>

                <div class="col-12">
                  <div class="form-input">
                    {{ form_widget(form.description, {'attr': {'id': 'blog-content'}}) }}
                    {{ form_label(form.description, 'Content *', {'label_attr': {'class': 'lh-1 text-16 text-light-1'}}) }}
                    <div class="text-danger mt-5">
                      {{ form_errors(form.description) }}
                    </div>
                  </div>
                </div>

                <div class="col-12">
                  <div class="form-input">
                    {{ form_label(form.picture, 'Image', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                    {{ form_widget(form.picture, {'attr': {'class': 'form-control py-10 px-15 bg-light-2 rounded-4', 'id': 'blog-image'}}) }}
                    <small class="d-block mt-10 text-14 text-light-1">Recommended size: 800x600px, Max size: 2MB</small>
                    <div class="text-danger mt-5">
                      {{ form_errors(form.picture) }}
                    </div>
                  </div>
                </div>

                <div class="col-12">
                  <div class="row x-gap-20 y-gap-10 pt-15">
                    <div class="col-auto">
                      <button type="submit" class="button -md -dark-1 bg-blue-1 text-white">
                        Publish Post <i class="icon-arrow-right ml-10"></i>
                      </button>
                    </div>
                    
                    <div class="col-auto">
                      <button type="button" id="generate-ai-button" class="button -md bg-purple-1 text-white">
                        <i class="icon-sparkles mr-10"></i> Generate with AI
                      </button>
                    </div>
                    
                    <div class="col-auto">
                      <a href="{{ path('app_blog_index') }}" class="button -md -blue-1 bg-blue-1-05 text-blue-1">
                        Cancel
                      </a>
                    </div>
                  </div>
                </div>
              {{ form_end(form) }}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<div id="modal-container"></div>

{% block javascripts %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Preview uploaded image
    var imageInput = document.querySelector('input[type="file"]');
    
    if (imageInput) {
      imageInput.addEventListener('change', function() {
        if (this.files && this.files[0]) {
          var reader = new FileReader();
          
          reader.onload = function(e) {
            // Create image preview container if it doesn't exist
            var previewContainer = document.getElementById('image-preview');
            
            if (!previewContainer) {
              previewContainer = document.createElement('div');
              previewContainer.id = 'image-preview';
              previewContainer.className = 'mt-15 p-10 border rounded-4';
              this.parentElement.appendChild(previewContainer);
            } else {
              previewContainer.innerHTML = '';
            }
            
            // Create image element
            var img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'img-fluid rounded-4';
            img.style.maxHeight = '200px';
            previewContainer.appendChild(img);
            
            // Add file name
            var fileName = document.createElement('div');
            fileName.className = 'mt-10 text-14 text-light-1';
            fileName.textContent = this.files[0].name;
            previewContainer.appendChild(fileName);
          }.bind(this);
          
          reader.readAsDataURL(this.files[0]);
        }
      });
    }
    
    // Modal handling
    var loadingModalHTML = `
      <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 1040;"></div>
      <div class="modal" style="display: block; position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 1050; overflow-x: hidden; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" style="position: relative; width: auto; margin: 1.75rem auto; max-width: 500px;">
          <div class="modal-content" style="position: relative; background-color: #fff; border-radius: 0.3rem; box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5); outline: 0;">
            <div class="modal-body text-center py-30">
              <div class="spinner-border text-purple-1 mb-20" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
              </div>
              <h5 class="text-18 fw-500">Generating content with AI...</h5>
              <p class="mt-10">This might take a few moments. Please wait.</p>
            </div>
          </div>
        </div>
      </div>
    `;
    
    var errorModalHTML = `
      <div class="modal-backdrop" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); z-index: 1040;"></div>
      <div class="modal" style="display: block; position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 1050; overflow-x: hidden; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" style="position: relative; width: auto; margin: 1.75rem auto; max-width: 500px;">
          <div class="modal-content" style="position: relative; background-color: #fff; border-radius: 0.3rem; box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5); outline: 0;">
            <div class="modal-header" style="display: flex; align-items: center; justify-content: space-between; padding: 1rem; border-bottom: 1px solid #dee2e6;">
              <h5 class="modal-title text-18 fw-500">Missing Information</h5>
              <button type="button" class="btn-close-custom" style="background: transparent; border: 0; font-size: 1.5rem; font-weight: 700; color: #000; opacity: 0.5; cursor: pointer;">&times;</button>
            </div>
            <div class="modal-body py-30">
              <p id="error-message-text">Please upload an image and select an activity to generate content.</p>
            </div>
            <div class="modal-footer" style="display: flex; justify-content: flex-end; padding: 1rem; border-top: 1px solid #dee2e6;">
              <button type="button" class="button -md -blue-1 bg-blue-1-05 text-blue-1" id="error-close-btn">Close</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Create modal container if it doesn't exist
    var modalContainer = document.getElementById('modal-container');
    if (!modalContainer) {
      modalContainer = document.createElement('div');
      modalContainer.id = 'modal-container';
      document.body.appendChild(modalContainer);
    }
    
    function showLoadingModal() {
      document.body.style.overflow = 'hidden'; // Prevent scrolling
      modalContainer.innerHTML = loadingModalHTML;
    }
    
    function hideLoadingModal() {
      document.body.style.overflow = '';
      modalContainer.innerHTML = '';
    }
    
    function showErrorModal(message) {
      document.body.style.overflow = 'hidden'; // Prevent scrolling
      modalContainer.innerHTML = errorModalHTML;
      
      // Set error message
      var errorMessage = document.getElementById('error-message-text');
      if (errorMessage && message) {
        errorMessage.textContent = message;
      }
      
      // Add event listeners for close buttons
      var closeButton = document.querySelector('.btn-close-custom');
      var closeBtn = document.getElementById('error-close-btn');
      
      if (closeButton) {
        closeButton.addEventListener('click', hideErrorModal);
      }
      
      if (closeBtn) {
        closeBtn.addEventListener('click', hideErrorModal);
      }
    }
    
    function hideErrorModal() {
      document.body.style.overflow = '';
      modalContainer.innerHTML = '';
    }
    
    // AI content generation
    var generateButton = document.getElementById('generate-ai-button');
    // Try multiple approaches to find the activity select element
    var activitySelect = document.getElementById('activity-select') || 
                        document.querySelector('select[name="post_form[activityId]"]') ||
                        document.querySelector('select[id$="_activityId"]');
    // Try multiple approaches to find the image input
    var blogImageInput = document.getElementById('blog-image') || 
                         document.querySelector('input[type="file"]') ||
                         document.querySelector('input[name="post_form[picture]"]');
    var blogContentArea = document.getElementById('blog-content');
    
    // Log found elements for debugging
    console.log('Generate button:', generateButton);
    console.log('Activity select found:', activitySelect);
    console.log('Blog image input found:', blogImageInput);
    console.log('Blog content area found:', blogContentArea);
    
    // Debug form elements more extensively
    var allTextareas = document.querySelectorAll('textarea');
    console.log('All textareas on page:', allTextareas);
    var formContent = document.querySelector('textarea[name="post_form[description]"]');
    console.log('Content textarea by name:', formContent);
    
    if (generateButton) {
      generateButton.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent form submission
        
        // Add debug logging
        console.log('Activity select element:', activitySelect);
        console.log('Blog image input element:', blogImageInput);
        
        if (activitySelect) {
          console.log('Activity value:', activitySelect.value);
          console.log('Activity options:', activitySelect.options);
          console.log('Activity selected index:', activitySelect.selectedIndex);
        }
        
        if (blogImageInput) {
          console.log('Blog image files:', blogImageInput.files);
          console.log('Blog image has files:', blogImageInput.files && blogImageInput.files.length > 0);
          if (blogImageInput.files && blogImageInput.files.length > 0) {
            console.log('First file name:', blogImageInput.files[0].name);
          }
        }
        
        // Try to find all file inputs in the form as a fallback
        var formElement = document.getElementById('blog-form');
        if (formElement) {
          var fileInputs = formElement.querySelectorAll('input[type="file"]');
          console.log('All file inputs in form:', fileInputs);
          
          if (fileInputs.length > 0 && (!blogImageInput || !blogImageInput.files || blogImageInput.files.length === 0)) {
            // Use the first file input we find as a fallback
            blogImageInput = fileInputs[0];
            console.log('Using fallback file input:', blogImageInput);
            console.log('Fallback has files:', blogImageInput.files && blogImageInput.files.length > 0);
          }
        }
        
        // Validate inputs
        if (!activitySelect || !activitySelect.value || activitySelect.value === '') {
          showErrorModal('Please select an activity first.');
          return;
        }
        
        // First check direct blogImageInput
        var hasImage = false;
        if (blogImageInput && blogImageInput.files && blogImageInput.files.length > 0) {
          hasImage = true;
        } else {
          // Try to find any file input with files in the form
          var formElement = document.getElementById('blog-form');
          if (formElement) {
            var fileInputs = formElement.querySelectorAll('input[type="file"]');
            for (var i = 0; i < fileInputs.length; i++) {
              if (fileInputs[i].files && fileInputs[i].files.length > 0) {
                blogImageInput = fileInputs[i]; // Reassign to the one with files
                hasImage = true;
                break;
              }
            }
          }
        }
        
        if (!hasImage) {
          showErrorModal('Please upload an image first.');
          return;
        }
        
        // Prepare form data for API request
        var formData = new FormData();
        
        // Get activity ID - try getting the value directly from the form if possible
        var activityId = activitySelect ? activitySelect.value : '';
        
        // If still no value, try getting it from the form directly
        if (!activityId || activityId === '') {
          var formElement = document.getElementById('blog-form');
          if (formElement) {
            // Try to find any select element within the form
            var selects = formElement.querySelectorAll('select');
            console.log('All select elements in form:', selects);
            
            if (selects.length > 0) {
              // Use the first select element we find (assuming it's the activity dropdown)
              activityId = selects[0].value;
              console.log('Using select value from form:', activityId);
            }
          }
        }
        
        // Get the file from blogImageInput or try to find it from the form
        var imageFile = null;
        if (blogImageInput && blogImageInput.files && blogImageInput.files.length > 0) {
          imageFile = blogImageInput.files[0];
          console.log('Using image file from input:', imageFile.name);
        } else {
          // Try to find the file from any file input in the form
          var formElement = document.getElementById('blog-form');
          if (formElement) {
            var fileInputs = formElement.querySelectorAll('input[type="file"]');
            for (var i = 0; i < fileInputs.length; i++) {
              if (fileInputs[i].files && fileInputs[i].files.length > 0) {
                imageFile = fileInputs[i].files[0];
                console.log('Found image file from form:', imageFile.name);
                break;
              }
            }
          }
        }
        
        formData.append('activityId', activityId);
        if (imageFile) {
          formData.append('image', imageFile);
          console.log('Image added to FormData:', imageFile.name);
        } else {
          console.error('No image file found!');
        }
        
        // Show loading modal
        showLoadingModal();
        
        // Send API request
        fetch(
          '{{ path('blog_generate_content') }}', 
          { 
            method: 'POST', 
            body: formData, 
            cache: 'no-cache', 
            credentials: 'same-origin',
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          }
        )
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          hideLoadingModal();
          
          if (data.error) {
            showErrorModal(data.error);
          } else if (data.content) {
            // Try multiple approaches to find the content field
            var contentField = blogContentArea || 
                              document.querySelector('textarea[name="post_form[description]"]') || 
                              document.querySelector('textarea');
            
            console.log('Using content field:', contentField);
            
            if (contentField) {
              // Insert generated content into the editor
              contentField.value = data.content;
              console.log('Content set to:', contentField.value.substring(0, 50) + '...');
              
              // Trigger focus/blur event to activate the label animation
              if (contentField.value.trim() !== '') {
                contentField.classList.add('is-active');
                
                // Focus the field to ensure it's visible to the user
                contentField.focus();
                // Scroll to the content field
                contentField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Show success notification
                var successMessage = document.createElement('div');
                successMessage.className = 'alert alert-success mb-20 mt-20';
                successMessage.innerHTML = '<div class="px-20 py-15 bg-green-1 rounded-4"><h5 class="text-white fw-500">Content successfully generated! You can now publish your blog post.</h5></div>';
                
                // Insert the success message before the form
                var formElement = document.getElementById('blog-form');
                if (formElement && formElement.parentNode) {
                  formElement.parentNode.insertBefore(successMessage, formElement);
                  
                  // Remove the message after 5 seconds
                  setTimeout(function() {
                    if (successMessage.parentNode) {
                      successMessage.parentNode.removeChild(successMessage);
                    }
                  }, 5000);
                }
              }
            } else {
              showErrorModal('Could not find the content field to insert the generated text. Please copy it manually: ' + data.content);
            }
          }
        })
        .catch(function(error) {
          hideLoadingModal();
          showErrorModal('An error occurred. Please try again later.');
          console.error('Error:', error);
        });
      });
    }
  });
</script>
{% endblock javascripts %}

{% endblock body %}