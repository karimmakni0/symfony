{% extends 'base.html.twig' %}

{% block title %}{{ activity.activityName }} - Activity Details{% endblock %}

{% block body %}
<!-- Include the AI Chat Assistant -->
{% include 'client/Activities/chat-assistant.html.twig' %}

<div class="hero-section">
  <!-- Modern Hero Banner -->
  <div class="hero-banner position-relative mb-5">
    {% if activity.resources is not empty %}
      {% set featured_image = activity.resources|first %}
      <div class="hero-image-container">
        {% if featured_image.path starts with 'http' %}
          <img src="{{ featured_image.path }}" alt="{{ activity.activityName }}" class="hero-image">
        {% else %}
          <img src="{{ asset(featured_image.path) }}" alt="{{ activity.activityName }}" class="hero-image">
        {% endif %}
        <div class="hero-overlay"></div>
      </div>
    {% else %}
      <div class="hero-image-container">
        <img src="{{ asset('assets/img/activities/default.jpg') }}" alt="{{ activity.activityName }}" class="hero-image">
        <div class="hero-overlay"></div>
      </div>
    {% endif %}
    
    <div class="container position-relative">
      <div class="hero-content text-white">
        <div class="mb-3">
          <span class="hero-badge">{{ activity.activityType ?? 'Activity' }}</span>
          <div class="rating-stars mt-2">
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star-half-alt"></i>
            <span class="ms-2 text-white">(4.5)</span>
          </div>
        </div>
        <h1 class="hero-title mb-4 glow-effect">{{ activity.activityName }}</h1>
        <div class="hero-highlights d-flex flex-wrap">
          <div class="highlight-item me-4 mb-3">
            <i class="fas fa-map-marker-alt me-2"></i>
            <span>{{ activity.activityDestination }}</span>
          </div>
          {% if activity.activityDuration %}
          <div class="highlight-item me-4 mb-3">
            <i class="fas fa-clock me-2"></i>
            <span>{{ activity.activityDuration }}</span>
          </div>
          {% endif %}
          <div class="highlight-item me-4 mb-3">
            <i class="fas fa-users me-2"></i>
            <span>{{ activity.maxNumber - totalBookedTickets }} spots left</span>
          </div>
          <div class="highlight-item mb-3">
            <i class="fas fa-tag me-2"></i>
            <span>{{ activity.activityPrice|number_format(2) }} TND</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="container">
    <!-- Thumbnails Gallery -->
    <div class="row mb-5">
      <div class="col-12">
        <div class="thumbnails-gallery">
          <div class="row g-3">
            {% if activity.resources is not empty and activity.resources|length > 1 %}
              {% for i in 1..4 %}
                {% if activity.resources[i] is defined %}
                  <div class="col-6 col-md-3">
                    <div class="thumbnail-card">
                      {% if activity.resources[i].path starts with 'http' %}
                        <img src="{{ activity.resources[i].path }}" alt="{{ activity.activityName }} - Photo {{ i+1 }}" class="img-fluid rounded-3">
                      {% else %}
                        <img src="{{ asset(activity.resources[i].path) }}" alt="{{ activity.activityName }} - Photo {{ i+1 }}" class="img-fluid rounded-3">
                      {% endif %}
                    </div>
                  </div>
                {% endif %}
              {% endfor %}
              
              {% if activity.resources|length > 5 %}
                <div class="col-6 col-md-3">
                  <div class="thumbnail-card position-relative">
                    {% set lastImage = activity.resources[5 < activity.resources|length ? 5 : activity.resources|length - 1] %}
                    {% if lastImage.path starts with 'http' %}
                      <img src="{{ lastImage.path }}" alt="{{ activity.activityName }}" class="img-fluid rounded-3">
                    {% else %}
                      <img src="{{ asset(lastImage.path) }}" alt="{{ activity.activityName }}" class="img-fluid rounded-3">
                    {% endif %}
                    <div class="more-photos-overlay rounded-3">
                      <a href="#imageGalleryModal" data-bs-toggle="modal" class="d-flex flex-column align-items-center justify-content-center h-100 text-decoration-none">
                        <i class="fas fa-images fa-2x mb-2 text-white"></i>
                        <span class="text-white fw-bold">+{{ activity.resources|length - 5 }} photos</span>
                      </a>
                    </div>
                  </div>
                </div>
              {% endif %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>

    <!-- Full Image Gallery Modal -->
   

    <div class="row g-4">
      <div class="col-lg-8">
        <!-- Activity Details Card -->
        <div class="card shadow-sm border-0 rounded-4 overflow-hidden mb-4">
          <!-- Gradient header -->
          <div class="card-header bg-gradient-primary p-4">
            <div class="d-flex align-items-center">
              <i class="fas fa-info-circle fa-2x me-3 text-white"></i>
              <h3 class="mb-0 text-white">Activity Details</h3>
            </div>
          </div>
          
          <!-- Key Features -->
          <div class="card-body p-0">
            <!-- Guarantees banner -->
            <div class="guarantees-banner bg-light p-3 d-flex justify-content-between align-items-center border-bottom">
              <div class="d-flex flex-wrap">
                <div class="guarantee-item me-4">
                  <i class="fas fa-shield-alt text-success me-2"></i>
                  <span class="fw-bold">Best Price Guarantee</span>
                </div>
                <div class="guarantee-item me-4">
                  <i class="fas fa-undo-alt text-success me-2"></i>
                  <span class="fw-bold">Free Cancellation</span>
                </div>
                <div class="guarantee-item">
                  <i class="fas fa-check-circle text-success me-2"></i>
                  <span class="fw-bold">Instant Confirmation</span>
                </div>
              </div>
            </div>
            
            <!-- Key details in icons -->
            <div class="p-4">
              <div class="row text-center g-3 mb-4">
                {% if activity.activityDestination %}
                <div class="col-6 col-md-3">
                  <div class="feature-card p-3 h-100">
                    <div class="feature-icon bg-primary-subtle rounded-circle p-3 mb-3 mx-auto">
                      <i class="fas fa-map-marker-alt text-primary fs-4"></i>
                    </div>
                    <h6 class="mb-1">Location</h6>
                    <small class="text-muted">{{ activity.activityDestination }}</small>
                  </div>
                </div>
                {% endif %}
                
                {% if activity.activityDuration %}
                <div class="col-6 col-md-3">
                  <div class="feature-card p-3 h-100">
                    <div class="feature-icon bg-primary-subtle rounded-circle p-3 mb-3 mx-auto">
                      <i class="fas fa-clock text-primary fs-4"></i>
                    </div>
                    <h6 class="mb-1">Duration</h6>
                    <small class="text-muted">{{ activity.activityDuration }}</small>
                  </div>
                </div>
                {% endif %}
                
                <div class="col-6 col-md-3">
                  <div class="feature-card p-3 h-100">
                    <div class="feature-icon bg-primary-subtle rounded-circle p-3 mb-3 mx-auto">
                      <i class="fas fa-users text-primary fs-4"></i>
                    </div>
                    <h6 class="mb-1">Group Size</h6>
                    <small class="text-muted">{{ activity.maxNumber }} max</small>
                  </div>
                </div>
                
                <div class="col-6 col-md-3">
                  <div class="feature-card p-3 h-100">
                    <div class="feature-icon bg-primary-subtle rounded-circle p-3 mb-3 mx-auto">
                      <i class="fas fa-th-large text-primary fs-4"></i>
                    </div>
                    <h6 class="mb-1">Category</h6>
                    <small class="text-muted">{{ activity.activityType|default('Activity') }}</small>
                  </div>
                </div>
              </div>
              
              <!-- Activity description -->
              <h4 class="border-bottom pb-2 mb-3">About This Activity</h4>
              <div class="activity-description mb-4">
                {{ activity.activityDescription|raw }}
              </div>
            </div>
          </div>
        </div>
        
        <!-- Availability section -->
        <div class="card shadow-sm border-0 rounded-4 mb-4 overflow-hidden">
          <div class="card-header bg-gradient-info p-4 text-white">
            <div class="d-flex align-items-center">
              <i class="fas fa-calendar-alt fa-2x me-3"></i>
              <h3 class="mb-0">Availability</h3>
            </div>
          </div>
          
          <div class="card-body p-4">
            <div class="availability-stats mb-4">
              {% set percentBooked = activity.maxNumber > 0 ? (totalBookedTickets / activity.maxNumber) * 100 : 0 %}
              {% set percentAvailable = 100 - percentBooked %}
              {% set availableSpots = activity.maxNumber - totalBookedTickets %}
              
              <!-- Visual indicator -->
              <div class="position-relative mb-4">
                <div class="progress" style="height: 40px; background-color: #e9ecef; border-radius: 20px;">
                  <div class="progress-bar bg-success" role="progressbar" 
                       style="width: {{ percentBooked }}%;"
                       aria-valuenow="{{ totalBookedTickets }}" aria-valuemin="0" aria-valuemax="{{ activity.maxNumber }}">
                  </div>
                </div>
                <div class="position-absolute top-0 start-0 end-0 bottom-0 d-flex align-items-center justify-content-center">
                  <span class="text-dark fw-bold fs-5">{{ totalBookedTickets }} / {{ activity.maxNumber }}</span>
                </div>
              </div>
              
              <!-- Availability details -->
              <div class="row g-4 mb-3">
                <div class="col-md-6">
                  <div class="availability-card available p-3 text-center rounded-4 h-100">
                    <div class="availability-icon mb-2">
                      <i class="fas fa-check-circle fa-3x text-primary"></i>
                    </div>
                    <h4 class="fw-bold">{{ availableSpots }}</h4>
                    <p class="mb-0">Available Spots</p>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="availability-card booked p-3 text-center rounded-4 h-100">
                    <div class="availability-icon mb-2">
                      <i class="fas fa-user-check fa-3x text-success"></i>
                    </div>
                    <h4 class="fw-bold">{{ totalBookedTickets }}</h4>
                    <p class="mb-0">Booked Spots</p>
                  </div>
                </div>
              </div>
              
              <!-- Status indicator -->
              <div class="availability-status p-3 rounded-4 text-center">
                <h3 class="display-4 fw-bold mb-2">
                  {{ availableSpots }}
                  <span class="fs-6 text-muted">out of {{ activity.maxNumber }}</span>
                </h3>
                <p class="mb-0 fs-5">Spots Remaining</p>
                
                {% if availableSpots <= 5 and availableSpots > 0 %}
                  <div class="limited-availability mt-3 p-2 rounded bg-warning-subtle">
                    <i class="fas fa-exclamation-circle me-2 text-warning"></i>
                    <span class="fw-bold">Limited availability!</span> Book soon to secure your spot.
                  </div>
                {% elseif availableSpots <= 0 %}
                  <div class="sold-out mt-3 p-2 rounded bg-danger-subtle">
                    <i class="fas fa-times-circle me-2 text-danger"></i>
                    <span class="fw-bold">Sold out!</span> No more spots available for this activity.
                  </div>
                {% else %}
                  <div class="good-availability mt-3 p-2 rounded bg-success-subtle">
                    <i class="fas fa-thumbs-up me-2 text-success"></i>
                    <span class="fw-bold">Good availability!</span> Plenty of spots still available.
                  </div>
                {% endif %}
              </div>
            </div>
          </div>
        </div>
        
        <!-- Maps & Location section -->
        {% if activity.activityDestination %}
        <div class="card shadow-sm border-0 rounded-4 overflow-hidden mb-4">
          <div class="card-header bg-gradient-location p-4">
            <div class="d-flex align-items-center">
              <i class="fas fa-map-marker-alt fa-2x me-3 text-white"></i>
              <h3 class="mb-0 text-white">Location & Map</h3>
            </div>
          </div>
          <div class="card-body p-0">
            <div class="location-info p-3 d-flex align-items-center justify-content-between bg-light">
              <div class="d-flex align-items-center">
                <i class="fas fa-compass text-success me-2 fs-5"></i>
                <span class="fw-bold">{{ activity.activityDestination }}</span>
              </div>
              <a href="https://www.google.com/maps/search/{{ activity.activityDestination|url_encode }}" target="_blank" class="btn btn-sm btn-outline-success">
                <i class="fas fa-directions me-1"></i> Get Directions
              </a>
            </div>
            
            {# Weather Information Section #}
            {% if weatherData is defined and weatherData is not null %}
            <div class="weather-info p-3 bg-gradient-primary-to-secondary text-white">
              <div class="row align-items-center">
                <div class="col-12 col-md-6 mb-3 mb-md-0">
                  <h5 class="mb-1"><i class="fas fa-cloud me-2"></i>Current Weather</h5>
                  <p class="mb-0 small text-white-50">Weather information for {{ weatherData.location }}</p>
                </div>
                <div class="col-12 col-md-6">
                  <div class="d-flex align-items-center">
                    <div class="weather-icon me-3">
                      <img src="https://openweathermap.org/img/wn/{{ weatherData.icon }}@2x.png" alt="{{ weatherData.description }}" width="64" height="64">
                    </div>
                    <div class="weather-details">
                      <div class="temperature fs-3 fw-bold">{{ weatherData.temp }}°C</div>
                      <div class="description">{{ weatherData.description }}</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="weather-details-extended mt-3 pt-3 border-top border-white border-opacity-25">
                <div class="row text-center g-2">
                  <div class="col-4">
                    <div class="weather-detail-item p-2">
                      <i class="fas fa-temperature-high text-warning me-1"></i>
                      <span class="label">Feels like</span>
                      <div class="value">{{ weatherData.feels_like }}°C</div>
                    </div>
                  </div>
                  <div class="col-4">
                    <div class="weather-detail-item p-2">
                      <i class="fas fa-tint text-info me-1"></i>
                      <span class="label">Humidity</span>
                      <div class="value">{{ weatherData.humidity }}%</div>
                    </div>
                  </div>
                  <div class="col-4">
                    <div class="weather-detail-item p-2">
                      <i class="fas fa-wind text-light me-1"></i>
                      <span class="label">Wind</span>
                      <div class="value">{{ weatherData.wind_speed }} m/s</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            {% endif %}
            
            <div class="map-container">
              <div class="map-view-toggle mb-3 d-flex justify-content-center">
                <div class="view-toggle-buttons">
                  <button id="mapViewBtn" class="view-toggle-btn view-toggle-map active">
                    <i class="fas fa-map"></i>
                    <span>{{ 'map_view'|trans }}</span>
                  </button>
                  <button id="streetViewBtn" class="view-toggle-btn view-toggle-street">
                    <i class="fas fa-street-view"></i>
                    <span>{{ 'street_view'|trans }}</span>
                  </button>
                  <button id="directionsBtn" class="view-toggle-btn view-toggle-directions">
                    <i class="fas fa-route"></i>
                    <span>{{ 'get_directions'|trans }}</span>
                  </button>
                </div>
              </div>
              <div class="full-map-wrapper">
                <iframe id="mapFrame" src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d{{ activity.longitude|default(10.17991905) }}!3d{{ activity.latitude|default(36.79177545) }}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2zMzrCsDQ3JzMwLjQiTiAxMMKwMTAnNDcuNyJF!5e0!3m2!1sen!2stn!4v1684514448720!5m2!1sen!2stn" class="full-map" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
              </div>
            </div>
          </div>
        </div>
        {% endif %}
      </div>
      
      <div class="col-lg-4">
        <!-- Booking card -->
        <div class="booking-card card border-0 rounded-4 mb-4 sticky-top" style="top: 100px; z-index: 900;">
          <div class="card-header bg-gradient-primary text-white p-4 rounded-top-4">
            <h4 class="mb-0"><i class="fa fa-calendar-check me-2"></i>Book This Activity</h4>
          </div>
          <div class="card-body p-4">
            <div class="price-display text-center mb-4 p-3 bg-light rounded-3">
              <div class="fs-6 text-muted mb-1">Starting from</div>
              <div class="display-5 fw-bold text-primary">{{ activity.activityPrice|number_format(2) }}<span class="fs-5"> TND</span></div>
              <div class="badge bg-success mt-2">Best Price Guarantee</div>
            </div>
            
            <div class="booking-summary bg-light rounded-3 p-3 mb-4">
              <h6 class="d-flex align-items-center mb-3"><i class="fa fa-receipt me-2 text-primary"></i>Booking Summary</h6>
              <div class="d-flex justify-content-between mb-2 summary-item">
                <span><i class="fa fa-tag me-1 text-muted"></i>Price per person:</span>
                <span class="fw-bold">{{ activity.activityPrice|number_format(2) }} TND</span>
              </div>
              <div class="d-flex justify-content-between mb-2 summary-item">
                <span><i class="fa fa-users me-1 text-muted"></i>Participants:</span>
                <span id="summaryTicketCount" class="fw-bold">1</span>
              </div>
              <hr class="my-2">
              <div class="d-flex justify-content-between summary-total">
                <span class="fw-bold">Total price:</span>
                <span class="fw-bold text-primary fs-5" id="summaryTotalPrice">{{ activity.activityPrice|number_format(2) }} TND</span>
              </div>
            </div>
            
            <form action="{{ path('app_payment_reservation', {'id': activity.id}) }}" method="post" class="booking-form" id="bookingForm">
              <!-- Participants Selector -->
              <div class="mb-4">
                <div class="booking-form-label">
                  <i class="fas fa-users booking-icon-bubble"></i>
                  <span>Number of Participants</span>
                </div>
                
                <div class="participants-selector">
                  <button type="button" class="participant-btn decrease" id="decreaseParticipants">
                    <i class="fas fa-minus"></i>
                  </button>
                  <div class="participant-display">
                    <input type="number" name="participants" id="directParticipantsInput" 
                           value="1" min="1" max="{{ activity.maxNumber - totalBookedTickets }}" readonly>
                  </div>
                  <button type="button" class="participant-btn increase" id="increaseParticipants">
                    <i class="fas fa-plus"></i>
                  </button>
                </div>
                
                <div class="booking-info-row">
                  <div class="info-item">
                    <i class="fas fa-info-circle text-primary"></i>
                    <span>Max {{ activity.maxNumber }} participants</span>
                  </div>
                  <div class="info-item highlight">
                    <i class="fas fa-user-check text-success"></i>
                    <span><span id="spotsLeft">{{ activity.maxNumber - totalBookedTickets }}</span> spots left</span>
                  </div>
                </div>
              </div>
              
              <br>
              <!-- Date Selector -->
              <div class="mb-4">
                <div class="booking-form-label">
                  <i class="fas fa-calendar booking-icon-bubble"></i>
                  <span>Select Date</span>
                </div>
                
                <div class="date-selector">
                  <input type="date" name="reservationDate" id="reservationDate" required min="{{ 'now'|date('Y-m-d') }}">
                </div>
              </div>
              
              <input type="hidden" name="totalPrice" id="hiddenTotalPrice" value="{{ activity.activityPrice|number_format(2) }}">
              <br>
              <button type="submit" class="book-now-button">
                <div class="btn-content">
                  <i class="fas fa-check-circle"></i>
                  <span>Book Now</span>
                </div>
                <div class="btn-bg-hover"></div>
              </button>
            </form>
            
            <div class="trust-badges text-center mt-4">
              <div class="row g-2">
                <div class="col-4">
                  <div class="trust-item p-2">
                    <i class="fas fa-lock text-success fs-4"></i>
                    <small class="d-block mt-1">Secure</small>
                  </div>
                </div>
                <div class="col-4">
                  <div class="trust-item p-2">
                    <i class="fas fa-undo text-success fs-4"></i>
                    <small class="d-block mt-1">Free Cancellation</small>
                  </div>
                </div>
                <div class="col-4">
                  <div class="trust-item p-2">
                    <i class="fas fa-bolt text-success fs-4"></i>
                    <small class="d-block mt-1">Instant Confirmation</small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Similar Activities Section -->
    {% if similarActivities is defined and similarActivities|length > 0 %}
    <div class="row mt-5">
      <div class="col-12">
        <h3 class="text-primary mb-4">Similar Activities You Might Like</h3>
        <div class="row g-4">
          {% for similar in similarActivities %}
            <div class="col-md-4 col-lg-3">
              <div class="card h-100 shadow-sm border-0 rounded-4 overflow-hidden">
                <div class="similar-img-container">
                  {% if similar.resources is not empty %}
                    <img src="{{ asset(similar.resources|first.path) }}" alt="{{ similar.activityName }}" class="card-img-top">
                  {% else %}
                    <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                      <span class="text-muted">No image</span>
                    </div>
                  {% endif %}
                </div>
                <div class="card-body">
                  <h5 class="card-title">{{ similar.activityName }}</h5>
                  <p class="card-text text-truncate">{{ similar.activityDescription|striptags }}</p>
                  <div class="d-flex justify-content-between align-items-center">
                    <span class="text-primary fw-bold">{{ similar.activityPrice|number_format(2) }} TND</span>
                    <a href="{{ path('app_activities_details', {'id': similar.id}) }}" class="btn btn-sm btn-outline-primary">View Details</a>
                  </div>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
    {% endif %}
  </div>
</div>

{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <!-- Add SweetAlert2 for beautiful alerts -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <!-- Add anime.js for car animation in Get Directions -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>
  
  <!-- Main functionality script -->
  <script>
    // Define utility functions
    function setMinDate() {
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const yyyy = today.getFullYear();
      const formattedDate = yyyy + '-' + mm + '-' + dd;
      
      const reservationDateInput = document.getElementById('reservationDate');
      if (reservationDateInput) {
        reservationDateInput.min = formattedDate;
        reservationDateInput.value = formattedDate;
      }
    }
    
    // Execute when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Target our elements
      const participantsInput = document.getElementById('directParticipantsInput');
      const decreaseButton = document.getElementById('decreaseParticipants');
      const increaseButton = document.getElementById('increaseParticipants');
      const spotsLeftDisplay = document.getElementById('spotsLeft');
      const summaryTotalPrice = document.getElementById('summaryTotalPrice');
      const hiddenTotalPrice = document.getElementById('hiddenTotalPrice');
      const bookNowButton = document.querySelector('.book-now-button');
      const basePrice = {{ activity.activityPrice|json_encode|raw }}; // Get the base price
      const maxNumber = {{ activity.maxNumber|json_encode|raw }}; // Get max participants
      const spotsLeft = {{ (activity.maxNumber - totalBookedTickets)|json_encode|raw }}; // Available spots

      // Update function to recalculate price based on participants
      function updateSummaryTotal() {
        const participants = parseInt(participantsInput.value);
        const totalPrice = (basePrice * participants).toFixed(2);
        
        // Update displays
        if (summaryTotalPrice) {
          summaryTotalPrice.textContent = `${totalPrice} TND`;
        }
        if (hiddenTotalPrice) {
          hiddenTotalPrice.value = totalPrice;
        }
      }
      
      // Setup interactive controls
      if (participantsInput && decreaseButton && increaseButton) {
        // Decrement participants
        decreaseButton.addEventListener('click', function() {
          let currentValue = parseInt(participantsInput.value);
          if (currentValue > 1) {
            participantsInput.value = currentValue - 1;
            updateSummaryTotal();
          }
        });
        
        // Increment participants
        increaseButton.addEventListener('click', function() {
          let currentValue = parseInt(participantsInput.value);
          if (currentValue < spotsLeft) {
            participantsInput.value = currentValue + 1;
            updateSummaryTotal();
          }
        });
        
        // Allow direct input change (with validation)
        participantsInput.addEventListener('change', function() {
          let value = parseInt(this.value, 10);
          
          if (isNaN(value) || value < 1) {
            value = 1;
          } else if (value > spotsLeft) {
            value = spotsLeft;
          }
          
          this.value = value;
          updateSummaryTotal();
        });
      }
      
      // Animate booking button on hover
      if (bookNowButton) {
        bookNowButton.addEventListener('mouseenter', function() {
          this.classList.add('btn-lg-pulse');
        });
        
        bookNowButton.addEventListener('mouseleave', function() {
          this.classList.remove('btn-lg-pulse');
        });
      }
      
      // Set today's date as default reservation date
      setMinDate();
      
      // Initialize summary total
      updateSummaryTotal();
      
      // Add event listener for weather forecast when booking
      const bookingForm = document.getElementById('bookingForm');
      if (bookingForm) {
        setupWeatherForecast(bookingForm);
      }
    });

    function setupWeatherForecast(bookingForm) {
      bookingForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent default form submission
          
        // Get the selected date and location
        const selectedDate = document.getElementById('reservationDate').value;
        const location = "{{ activity.activityDestination }}"; // Get from the activity
          
        // Show loading state
        Swal.fire({
          title: 'Checking Weather...',
          text: 'Getting weather forecast for your booking date...',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });
          
        // Call the weather forecast API
        fetch(`/api/weather-forecast?location=${encodeURIComponent(location)}&date=${selectedDate}`)
          .then(response => response.json())
          .then(data => {
            // Extract weather info
            const weather = data.weather;
            const isEstimated = data.estimatedForecast || false;
            const warningText = data.warning || '';
              
            // Format date for display
            const formattedDate = new Date(selectedDate).toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
              
            // Create HTML content for the weather alert
            let weatherHtml = `
              <div class="swal-weather-container">
                <div class="swal-weather-header">
                  <img src="http://openweathermap.org/img/wn/${weather.icon}@2x.png" alt="${weather.description}">
                  <div class="swal-temperature">${weather.temp}°C</div>
                </div>
                <div class="swal-weather-details">
                  <div class="swal-weather-description">${weather.description}</div>
                  <div class="swal-weather-location">${weather.location}</div>
                  <div class="swal-weather-stats">
                    <span>Humidity: ${weather.humidity}%</span>
                    <span>Wind: ${weather.wind_speed || 0} m/s</span>
                  </div>
                </div>
              </div>
            `;
              
            // Show notice if this is an estimated forecast
            if (isEstimated && weather.notice) {
              weatherHtml += `<div class="swal-weather-notice">${weather.notice}</div>`;
            }
              
            if (warningText) {
              weatherHtml += `<div class="swal-weather-warning">${warningText}</div>`;
            }
              
            // Show SweetAlert with weather information
            Swal.fire({
              title: `Weather Forecast for ${formattedDate}`,
              html: weatherHtml,
              showCancelButton: true,
              confirmButtonText: 'Continue with Booking',
              cancelButtonText: 'Cancel Booking',
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              allowOutsideClick: false,
              customClass: {
                container: 'swal-weather-modal-container'
              }
            }).then((result) => {
              if (result.isConfirmed) {
                // User confirmed, submit the form
                bookingForm.submit();
              } else {
                // User canceled booking
                Swal.fire(
                  'Booking Canceled',
                  'Your booking has been canceled.',
                  'info'
                );
              }
            });
          })
          .catch(error => {
            console.error('Error fetching weather data:', error);
              
            // If there's an error, still give the user the option to continue
            Swal.fire({
              title: 'Weather Information Unavailable',
              text: 'We couldn\'t retrieve the weather forecast for your booking date. Would you like to continue anyway?',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: 'Continue with Booking',
              cancelButtonText: 'Cancel Booking'
            }).then((result) => {
              if (result.isConfirmed) {
                // User confirmed, submit the form
                bookingForm.submit();
              }
            });
          });
      });
    }
    
    // Map and Street View functionality
    const mapViewBtn = document.getElementById('mapViewBtn');
    const streetViewBtn = document.getElementById('streetViewBtn');
    const mapFrame = document.getElementById('mapFrame');
    
    if (mapViewBtn && streetViewBtn && mapFrame) {
      // Get actual coordinates and location name from the activity data
      const activityLat = {{ activity.latitude|default(36.79177545) }};
      const activityLng = {{ activity.longitude|default(10.17991905) }};
      const locationName = "{{ activity.activityDestination|e('js') }}";
      
      // Create URL for embedded Google Maps with marker
      const mapUrlWithLocation = `https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3000!2d${activityLng}!3d${activityLat}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z${encodeURIComponent(locationName)}!5e0!3m2!1sen!2stn!4v1684514448720!5m2!1sen!2stn`;
      
      // Save the original iframe reference and URL for later use
      const originalMapFrame = mapFrame;
      const originalMapUrl = mapUrlWithLocation;
      
      // Handle map view button click
      mapViewBtn.addEventListener('click', function() {
        // If we've replaced the iframe, create a new one with the original map
        if (mapFrame !== originalMapFrame) {
          const newMapFrame = document.createElement('iframe');
          newMapFrame.width = '100%';
          newMapFrame.height = '570';
          newMapFrame.frameBorder = '0';
          newMapFrame.style.border = '0';
          newMapFrame.src = originalMapUrl;
          newMapFrame.allowFullscreen = true;
          
          // Replace the street view iframe with our new map iframe
          mapFrame.parentNode.replaceChild(newMapFrame, mapFrame);
          
          // Update our reference
          mapFrame = newMapFrame;
        } else {
          // If we still have the original iframe, just update its src
          mapFrame.src = originalMapUrl;
        }
        
        // Update button states
        mapViewBtn.classList.add('active');
        streetViewBtn.classList.remove('active');
      });
      
      // Handle street view button click
      streetViewBtn.addEventListener('click', function() {
        // Create a Street View iframe with the proper parameters
        const streetViewFrame = document.createElement('iframe');
        streetViewFrame.width = '100%';
        streetViewFrame.height = '570';
        streetViewFrame.frameBorder = '0';
        streetViewFrame.style.border = '0';
        streetViewFrame.src = `https://www.google.com/maps?layer=c&cbll=${activityLat},${activityLng}&cbp=12,0,0,0,0&output=svembed`;
        streetViewFrame.allowFullscreen = true;
        
        // Replace the current iframe with our street view iframe
        mapFrame.parentNode.replaceChild(streetViewFrame, mapFrame);
        
        // Update our reference
        mapFrame = streetViewFrame;
        
        // Update button states
        streetViewBtn.classList.add('active');
        mapViewBtn.classList.remove('active');
      });
    }

  // Get Directions functionality
  if (document.getElementById('directionsBtn')) {
    const directionsBtn = document.getElementById('directionsBtn');
    
    // Store activity coordinates for directions - access the values from the data attributes
    const activityLatForDirections = {{ activity.latitude|default(36.79177545) }};
    const activityLngForDirections = {{ activity.longitude|default(10.17991905) }};
    const activityNameForDirections = "{{ activity.activityName|escape('js') }}";
    
    directionsBtn.addEventListener('click', function() {
      // Set active state for directions button
      directionsBtn.classList.add('active');
      mapViewBtn.classList.remove('active');
      streetViewBtn.classList.remove('active');
      
      // Show loading SweetAlert while we get the user's location
      Swal.fire({
        title: '{{ "getting_location"|trans }}',
        text: '{{ "please_wait"|trans }}',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Get user's current location
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showDirections, locationError);
      } else {
        Swal.fire({
          icon: 'error',
          title: '{{ "geolocation_not_supported"|trans }}',
          text: '{{ "browser_not_support_geolocation"|trans }}'
        });
      }
      
      // Show directions when we have the user's location
      function showDirections(position) {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;
        
        // Use the activity coordinates defined in outer scope
        const activityLat = activityLatForDirections;
        const activityLng = activityLngForDirections;
        
        // Create the directions sweet alert with a simpler animation
        Swal.fire({
          title: '{{ "directions_to_activity"|trans }}',
          html: `
            <div class="directions-container">
              <div class="route-animation-container" style="position: relative; height: 300px; margin-bottom: 20px; border-radius: 8px; overflow: hidden;">
                <!-- We've removed the Google Maps satellite view to just show our CSS World Map -->
                
                <!-- CSS World Map Background -->
                <div class="world-map-bg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(180deg, #1e88e5 0%, #0d47a1 100%); z-index: 1; overflow: hidden;">
                  <!-- CSS World Map Grid -->
                  <div class="map-grid" style="position: absolute; top: 0; left: 0; width: 200%; height: 200%; background-image: linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px); background-size: 20px 20px; transform: rotate(15deg); transform-origin: center center;"></div>
                  
                  <!-- CSS Continents (simplified shapes) -->
                  <div class="continent continent-na" style="position: absolute; width: 120px; height: 80px; background-color: rgba(76, 175, 80, 0.7); border-radius: 40% 60% 60% 40% / 70% 30% 70% 30%; top: 25%; left: 20%;"></div>
                  
                  <div class="continent continent-sa" style="position: absolute; width: 70px; height: 100px; background-color: rgba(76, 175, 80, 0.7); border-radius: 70% 30% 40% 60% / 30% 30% 70% 70%; top: 45%; left: 25%;"></div>
                  
                  <div class="continent continent-eu" style="position: absolute; width: 60px; height: 70px; background-color: rgba(76, 175, 80, 0.7); border-radius: 50% 50% 30% 70% / 60% 40% 60% 40%; top: 20%; left: 45%;"></div>
                  
                  <div class="continent continent-af" style="position: absolute; width: 80px; height: 100px; background-color: rgba(76, 175, 80, 0.7); border-radius: 30% 70% 70% 30% / 50% 40% 60% 50%; top: 35%; left: 45%;"></div>
                  
                  <div class="continent continent-as" style="position: absolute; width: 140px; height: 120px; background-color: rgba(76, 175, 80, 0.7); border-radius: 60% 40% 40% 60% / 60% 30% 70% 40%; top: 20%; left: 55%;"></div>
                  
                  <div class="continent continent-au" style="position: absolute; width: 70px; height: 50px; background-color: rgba(76, 175, 80, 0.7); border-radius: 60% 40% 60% 40% / 40% 60% 40% 60%; top: 60%; left: 70%;"></div>
                </div>
                
                <!-- The route path with multiple points for a road-like route -->
                <svg id="routePath" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 2;" viewBox="0 0 1000 300">
                  <!-- Path shadow/outline for added visibility -->
                  <path id="pathShadow" d="M100,150 C200,100 300,180 400,140 S500,80 600,120 S750,170 900,150" stroke="#FFFFFF" stroke-width="12" fill="none" opacity="0.3" stroke-linecap="round" />
                  
                  <!-- The visible route path (Google Maps blue) -->
                  <path id="visiblePath" d="M100,150 C200,100 300,180 400,140 S500,80 600,120 S750,170 900,150" stroke="#FFFFFF" stroke-width="8" fill="none" opacity="0.9" stroke-linecap="round" />
                  
                  <!-- The animation path (invisible) -->
                  <path id="drivingPath" d="M100,150 C200,100 300,180 400,140 S500,80 600,120 S750,170 900,150" stroke="transparent" stroke-width="1" fill="none" />
                </svg>
                
                <!-- Start point with label -->
                <div class="start-point" style="position: absolute; left: 10%; top: 50%; transform: translate(-50%, -50%); z-index: 3;">
                  <div style="position: relative; width: 32px; height: 32px;">
                    <div style="position: absolute; width: 32px; height: 32px; background-color: white; border-radius: 50%; box-shadow: 0 2px 6px rgba(0,0,0,0.3); display: flex; justify-content: center; align-items: center;">
                      <span style="color: #4285F4; font-weight: bold;">A</span>
                    </div>
                  </div>
                  <div style="font-size: 12px; margin-top: 8px; color: #333; font-weight: bold; text-shadow: 1px 1px 2px white; text-align: center;">{{ "your_location"|trans }}</div>
                </div>
                
                <!-- End point with label -->
                <div class="end-point" style="position: absolute; right: 10%; top: 50%; transform: translate(50%, -50%); z-index: 3;">
                  <div style="position: relative; width: 32px; height: 32px;">
                    <div style="position: absolute; width: 32px; height: 32px; background-color: white; border-radius: 50%; box-shadow: 0 2px 6px rgba(0,0,0,0.3); display: flex; justify-content: center; align-items: center;">
                      <span style="color: #EA4335; font-weight: bold;">B</span>
                    </div>
                  </div>
                  <div style="font-size: 12px; margin-top: 8px; color: #333; font-weight: bold; text-shadow: 1px 1px 2px white; text-align: center;">{{ "destination"|trans }}</div>
                </div>
                
                <!-- Animated car with shadow for better visibility -->
                <div id="carAnimation" style="position: absolute; left: 10%; top: 50%; transform: translate(-50%, -50%) rotate(0deg); z-index: 4; transition: transform 0.5s ease;">
                  <div style="width: 40px; height: 40px; background-color: white; border-radius: 50%; box-shadow: 0 2px 8px rgba(0,0,0,0.4); display: flex; justify-content: center; align-items: center;">
                    <img src="https://maps.google.com/mapfiles/kml/pal4/icon15.png" width="24" height="24" alt="{{ "your_car"|trans }}">
                  </div>
                </div>
              </div>
              
              <div id="streetViewContainer" style="height: 400px; border-radius: 8px; overflow: hidden; display: none;">
                <iframe 
                  width="100%" 
                  height="100%" 
                  frameborder="0" 
                  style="border:0" 
                  src="https://www.google.com/maps?layer=c&cbll=${activityLat},${activityLng}&cbp=12,0,0,0,0&output=svembed" 
                  allowfullscreen>
                </iframe>
              </div>
              
              <div class="directions-links" style="margin-top: 15px; text-align: center;">
                <a href="https://www.google.com/maps/dir/${userLat},${userLng}/${activityLat},${activityLng}" target="_blank" class="btn btn-primary">
                  <i class="fas fa-directions"></i> {{ "open_in_google_maps"|trans }}
                </a>
              </div>
            </div>
          `,
          width: 800,
          showCloseButton: true,
          showConfirmButton: false,
          didOpen: () => {
            // Get the path elements
            const svgPath = document.getElementById('drivingPath');
            const visiblePath = document.getElementById('visiblePath');
            const car = document.getElementById('carAnimation');
            const streetView = document.getElementById('streetViewContainer');
            
            // Make sure the path is visible with animation effects
            visiblePath.style.strokeDasharray = visiblePath.getTotalLength();
            visiblePath.style.strokeDashoffset = visiblePath.getTotalLength();
            visiblePath.style.animation = 'drawPath 2s ease-in-out forwards';
            
            // Add the path animation style
            const style = document.createElement('style');
            style.textContent = `
              @keyframes drawPath {
                0% { stroke-dashoffset: ${visiblePath.getTotalLength()}; }
                100% { stroke-dashoffset: 0; }
              }
            `;
            document.head.appendChild(style);
            
            // Get the total length of the path for animation
            const pathLength = svgPath.getTotalLength();
            
            // Start the car at the beginning of the path
            const startPoint = svgPath.getPointAtLength(0);
            car.style.left = startPoint.x + 'px';
            car.style.top = startPoint.y + 'px';
            
            // Animation duration
            const duration = 4000;
            const startTime = performance.now();
            
            // Animate car along the path
            function animateCarAlongPath(currentTime) {
              // Calculate progress (0 to 1)
              const elapsedTime = currentTime - startTime;
              const progress = Math.min(elapsedTime / duration, 1);
              
              // Get current position on the path
              const currentDistance = pathLength * progress;
              const currentPoint = svgPath.getPointAtLength(currentDistance);
              
              // Find angle for car rotation (direction of travel)
              let rotation = 0;
              if (progress < 1) {
                const lookAheadDistance = Math.min(currentDistance + 10, pathLength);
                const lookAheadPoint = svgPath.getPointAtLength(lookAheadDistance);
                rotation = Math.atan2(
                  lookAheadPoint.y - currentPoint.y,
                  lookAheadPoint.x - currentPoint.x
                ) * (180 / Math.PI);
              }
              
              // Position the car
              car.style.left = (currentPoint.x / 10) + '%';
              car.style.top = (currentPoint.y / 3) + '%';
              car.style.transform = `translate(-50%, -50%) rotate(${rotation}deg)`;
              
              // Continue animation or finish
              if (progress < 1) {
                window.requestAnimationFrame(animateCarAlongPath);
              } else {
                // Animation complete - hide the route path and show street view after a short delay
                setTimeout(() => {
                  // Hide the entire route animation container
                  document.querySelector('.route-animation-container').style.display = 'none';
                  
                  // Show the Street View
                  streetView.style.display = 'block';
                }, 500);
              }
            }
            
            // Start animation
            window.requestAnimationFrame(animateCarAlongPath);
          }
        });
      }
      
      // Handle location errors
      function locationError(error) {
        let errorMessage = '';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '{{ "location_permission_denied"|trans }}';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = '{{ "location_unavailable"|trans }}';
            break;
          case error.TIMEOUT:
            errorMessage = '{{ "location_request_timeout"|trans }}';
            break;
          default:
            errorMessage = '{{ "unknown_location_error"|trans }}';
            break;
        }
        
        Swal.fire({
          icon: 'error',
          title: '{{ "location_error"|trans }}',
          text: errorMessage
        });
      }
    });
  }

  // Add styles for the SweetAlert weather container and view toggle buttons
    document.head.insertAdjacentHTML('beforeend', `
      <style>
        /* Get Directions button styles */
        .view-toggle-directions {
          background-color: #3498db;
          color: white;
          border: none;
          padding: 8px 15px;
          border-radius: 20px;
          margin-left: 10px;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        
        .view-toggle-directions:hover {
          background-color: #2980b9;
          transform: translateY(-2px);
        }
        
        .view-toggle-directions.active {
          background-color: #2980b9;
          box-shadow: 0 0 10px rgba(41, 128, 185, 0.5);
        }
        
        .view-toggle-directions i {
          margin-right: 5px;
        }
      </style>
      <style>
        .swal-weather-container {
          display: flex;
          flex-direction: column;
          align-items: center;
          margin-bottom: 15px;
          background-color: rgba(0, 123, 255, 0.05);
          border-radius: 10px;
          padding: 15px;
        }
        
        .swal-weather-header {
          display: flex;
          align-items: center;
          justify-content: center;
          margin-bottom: 10px;
        }
        
        .swal-temperature {
          font-size: 2.5rem;
          font-weight: bold;
          margin-left: 10px;
          color: #007bff;
        }
        
        .swal-weather-details {
          text-align: center;
        }
        
        .swal-weather-description {
          font-size: 1.2rem;
          margin-bottom: 5px;
          text-transform: capitalize;
        }
        
        .swal-weather-location {
          font-size: 1rem;
          color: #6c757d;
          margin-bottom: 10px;
        }
        
        .swal-weather-stats {
          display: flex;
          justify-content: space-around;
          width: 100%;
        }
        
        .swal-weather-stats span {
          margin: 0 10px;
          color: #6c757d;
        }
        
        .swal-weather-notice, .swal-weather-warning {
          margin-top: 10px;
          padding: 5px 10px;
          border-radius: 5px;
          font-size: 0.9rem;
          text-align: center;
        }
        
        .swal-weather-notice {
          background-color: rgba(255, 193, 7, 0.2);
          color: #856404;
        }
        
        .swal-weather-warning {
          background-color: rgba(220, 53, 69, 0.2);
          color: #721c24;
        }
        
        .swal-weather-modal-container {
          z-index: 2000;
        }
      </style>
    `);
  </script>
  
  <!-- Weather alert styling -->
  <style>
    .swal-weather-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 15px;
      background-color: rgba(0, 123, 255, 0.05);
      border-radius: 10px;
      padding: 15px;
    }
    
    .swal-weather-header {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 10px;
    }
    
    .swal-temperature {
      font-size: 2.5rem;
      font-weight: bold;
      margin-left: 10px;
      color: #007bff;
    }
    
    .swal-weather-details {
      text-align: center;
    }
    
    .swal-weather-description {
      font-size: 1.2rem;
      margin-bottom: 5px;
      text-transform: capitalize;
    }
    
    .swal-weather-location {
      font-size: 1rem;
      color: #6c757d;
      margin-bottom: 10px;
    }
    
    .swal-weather-stats {
      display: flex;
      justify-content: space-around;
      width: 100%;
    }
    
    .swal-weather-stats span {
      margin: 0 10px;
      color: #6c757d;
    }
    
    .swal-weather-notice, .swal-weather-warning {
      margin-top: 10px;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 0.9rem;
      text-align: center;
    }
    
    .swal-weather-notice {
      background-color: rgba(255, 193, 7, 0.2);
      color: #856404;
    }
    
    .swal-weather-warning {
      background-color: rgba(220, 53, 69, 0.2);
      color: #721c24;
    }
    
    .swal-weather-modal-container {
      z-index: 2000;
    }
  </style>
  
  <!-- AI Chat Widget Styles -->
  <style>
    .ai-chat-container {
      position: fixed;
      top: 100px;
      left: 30px;
      z-index: 1000;
    }
  
    .chat-toggle {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
      color: white;
      border: none;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      z-index: 1001;
    }
  
    .chat-toggle:hover {
      transform: scale(1.1);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
    }
  
    .chat-toggle i {
      font-size: 24px;
    }
  
    /* Add a highlight to make the button more visible */
  .chat-toggle {
    box-shadow: 0 0 15px rgba(13, 110, 253, 0.7);
    animation: pulse-highlight 2s infinite;
  }
  
  @keyframes pulse-highlight {
    0% {
      box-shadow: 0 0 15px rgba(13, 110, 253, 0.7);
    }
    50% {
      box-shadow: 0 0 25px rgba(13, 110, 253, 0.9);
    }
    100% {
      box-shadow: 0 0 15px rgba(13, 110, 253, 0.7);
    }
  }
  
  .chat-toggle:before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
      opacity: 0.4;
      animation: pulse 2s infinite;
    }
  
    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 0.4;
      }
      50% {
        transform: scale(1.2);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 0;
      }
    }
  
    .ai-chat-widget {
      position: fixed;
      top: 160px;
      left: 30px;
      width: 350px;
      height: 500px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      transition: all 0.3s ease;
      transform: translateY(20px);
      opacity: 0;
      pointer-events: none;
      z-index: 1002;
    }
  
    .ai-chat-widget.open {
      transform: translateY(0);
      opacity: 1;
      pointer-events: all;
    }
  
    .chat-header {
      background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
      color: white;
      padding: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  
    .chat-header h5 {
      margin: 0;
      font-weight: 500;
      font-size: 16px;
    }
  
    .close-chat {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 18px;
    }
  
    .chat-messages {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background: #f8f9fa;
    }
  
    .chat-message {
      margin-bottom: 15px;
      display: flex;
      align-items: flex-start;
    }
  
    .chat-message.user {
      flex-direction: row-reverse;
    }
  
    .chat-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: #e9ecef;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 10px;
      flex-shrink: 0;
    }
  
    .chat-message.user .chat-avatar {
      margin-right: 0;
      margin-left: 10px;
      background: #0d6efd;
      color: white;
    }
  
    .chat-bubble {
      padding: 12px 15px;
      background: white;
      border-radius: 18px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      max-width: 80%;
    }
  
    .chat-message.user .chat-bubble {
      background: #0d6efd;
      color: white;
    }
  
    .chat-bubble p {
      margin: 0;
      line-height: 1.4;
    }
  
    .chat-input-container {
      padding: 15px;
      border-top: 1px solid #e9ecef;
      display: flex;
      background: white;
    }
  
    .chat-input {
      flex: 1;
      border: 1px solid #ced4da;
      border-radius: 20px;
      padding: 10px 15px;
      outline: none;
      transition: all 0.3s ease;
    }
  
    .chat-input:focus {
      border-color: #0d6efd;
      box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
  
    .send-message {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
      color: white;
      border: none;
      margin-left: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }
  
    .send-message:hover {
      transform: scale(1.1);
    }
  
    .send-message:disabled {
      background-color: #ced4da;
      cursor: not-allowed;
      transform: scale(1);
    }
  
    .typing-indicator {
      display: flex;
      align-items: center;
      margin: 10px 0;
    }
  
    .typing-indicator span {
      height: 8px;
      width: 8px;
      background: #0d6efd;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
      animation: typing 1s infinite ease-in-out;
    }
  
    .typing-indicator span:nth-child(2) {
      animation-delay: 0.2s;
    }
  
    .typing-indicator span:nth-child(3) {
      animation-delay: 0.4s;
      margin-right: 0;
    }
  
    @keyframes typing {
      0% {
        transform: translateY(0px);
      }
      50% {
        transform: translateY(-10px);
      }
      100% {
        transform: translateY(0px);
      }
    }
  
    /* Responsive Adjustments */
    @media (max-width: 576px) {
      .ai-chat-widget {
        width: 90%;
        left: 5%;
        top: 120px;
      }
      
      .chat-toggle {
        left: 20px;
        top: 80px;
      }
    }
  </style>
  

  
  {% endblock %}
  
  {% block stylesheets %}
  {{ parent() }}
  <style>
  /* Map View Toggle Button Styling */
  .view-toggle-buttons {
    display: flex;
    background-color: #f0f3f6;
    padding: 5px;
    border-radius: 30px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
  }
  
  .view-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 140px;
    border: none;
    padding: 10px 20px;
    border-radius: 25px;
    margin: 0 5px;
    transition: all 0.3s ease;
    background-color: transparent;
    color: #555;
    font-weight: 500;
  }
  
  .view-toggle-btn i {
    margin-right: 8px;
    font-size: 18px;
  }
  
  .view-toggle-btn.active {
    background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
    color: white;
    box-shadow: 0 4px 8px rgba(13, 110, 253, 0.3);
    transform: translateY(-2px);
  }
  
  .view-toggle-map:hover:not(.active) {
    background-color: rgba(13, 110, 253, 0.1);
  }
  
  .view-toggle-street:hover:not(.active) {
    background-color: rgba(13, 110, 253, 0.1);
  }
  
  /* Make sure RTL support is included */
  html[dir="rtl"] .view-toggle-btn i {
    margin-right: 0;
    margin-left: 8px;
  }
  </style>
  <!-- Add FontAwesome CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
  .hero-banner {
    height: 500px;
    position: relative;
    overflow: hidden;
  }
  
  .hero-image-container {
    height: 500px;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .hero-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0.85) 100%);
  }
  
  .hero-content {
    padding-top: 280px;
    padding-bottom: 50px;
    position: relative;
    z-index: 2;
    text-shadow: 1px 1px 3px rgba(0,0,0,0.4);
  }
  
  .glow-effect {
    animation: text-glow 2s ease-in-out infinite alternate;
  }
  
  @keyframes text-glow {
    from {
      text-shadow: 0 0 10px rgba(13, 110, 253, 0.3), 0 0 20px rgba(13, 110, 253, 0.2);
    }
    to {
      text-shadow: 0 0 12px rgba(13, 110, 253, 0.4), 0 0 22px rgba(13, 110, 253, 0.3);
    }
  }
  
  .hero-badge {
    padding: 8px 15px;
    border-radius: 30px;
    font-weight: 600;
    font-size: 14px;
    display: inline-block;
    background: linear-gradient(135deg, #0d6efd, #0a58ca);
    color: white;
    box-shadow: 0 2px 10px rgba(13, 110, 253, 0.4);
  }
  
  .hero-title {
    font-size: 3rem;
    font-weight: 800;
    text-shadow: 2px 2px 8px rgba(0,0,0,0.6);
    color: #ffffff; /* Clean white */
    letter-spacing: 0.5px;
  }
  
  .hero-highlights {
    font-size: 1.1rem;
  }
  
  .highlight-item {
    display: flex;
    align-items: center;
    color: rgba(255, 255, 255, 0.9); /* Slightly transparent white */
    text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
    font-weight: 500;
  }
  
  .highlight-item i {
    color: #0d6efd; /* Bootstrap primary blue */
  }
  
  .rating-stars {
    color: #ffc107; /* Keep this gold color as it's standard for ratings */
    filter: drop-shadow(0 1px 2px rgba(0,0,0,0.3));
  }
  
  /* Map Styling */
  .full-map-wrapper {
    position: relative;
    width: 100%;
    height: 400px;
    overflow: hidden;
    border-radius: 0 0 8px 8px;
  }
  
  .full-map {
    width: 100%;
    height: 100%;
    border: 0;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  /* Thumbnail Gallery */
  .thumbnail-card {
    height: 180px;
    overflow: hidden;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
  }
  
  .thumbnail-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.15);
  }
  
  .thumbnail-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .thumbnail-card:hover img {
    transform: scale(1.1);
  }
  
  .more-photos-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }
  
  .more-photos-overlay:hover {
    background-color: rgba(0,0,0,0.7);
  }
  
  /* Booking Card Styles */
  .booking-card {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    overflow: hidden;
  }
  
  .booking-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
  }
  
  .bg-gradient-primary {
    background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
  }
  
  .price-display {
    border-left: 4px solid #0d6efd;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
  }
  
  .price-display:hover {
    transform: translateY(-2px);
  }
  
  /* Booking Form Styling */
  .booking-form {
    padding: 5px;
  }
  
  .booking-form-label {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    font-weight: 600;
    font-size: 16px;
  }
  
  .booking-icon-bubble {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    background: linear-gradient(135deg, #0d6efd, #0a58ca);
    color: white;
    border-radius: 50%;
    margin-right: 12px;
    box-shadow: 0 3px 6px rgba(13, 110, 253, 0.2);
  }
  
  /* Participants Selector */
  .participants-selector {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    border-radius: 50px;
    padding: 5px;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
  }
  
  .participants-selector:focus-within {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  }
  
  .participant-btn {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    background: white;
    color: #0d6efd;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .participant-btn:hover {
    transform: scale(1.05);
  }
  
  .decrease:hover {
    background-color: #f8d7da;
    color: #dc3545;
  }
  
  .increase:hover {
    background-color: #d1e7dd;
    color: #198754;
  }
  
  .participant-display {
    flex-grow: 1;
    text-align: center;
    font-size: 20px;
    font-weight: 700;
    color: #212529;
  }
  
  .participant-display input {
    width: 100%;
    border: none;
    background: transparent;
    text-align: center;
    font-size: 24px;
    font-weight: 700;
    color: #0d6efd;
    -moz-appearance: textfield;
  }
  
  .participant-display input::-webkit-outer-spin-button,
  .participant-display input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  /* Date Selector */
  .date-selector {
    position: relative;
  }
  
  .date-selector input {
    width: 100%;
    height: 55px;
    padding: 0 15px;
    border: 2px solid #e9ecef;
    border-radius: 50px;
    font-size: 16px;
    transition: all 0.3s ease;
    background-color: #f8f9fa;
  }
  
  .date-selector input:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    outline: none;
  }
  
  /* Booking Info */
  .booking-info-row {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
    font-size: 14px;
  }
  
  .info-item {
    display: flex;
    align-items: center;
    color: #6c757d;
  }
  
  .info-item i {
    margin-right: 5px;
  }
  
  .info-item.highlight {
    color: #198754;
    font-weight: 500;
  }
  
  /* Book Now Button */
  .book-now-button {
    position: relative;
    width: 100%;
    padding: 15px 25px;
    border: none;
    border-radius: 50px;
    background: linear-gradient(135deg, #0d6efd, #0a58ca);
    color: white;
    font-size: 18px;
    font-weight: 600;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3);
  }
  
  .book-now-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(13, 110, 253, 0.4);
  }
  
  .btn-content {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn-content i {
    margin-right: 10px;
    font-size: 20px;
  }
  
  .btn-bg-hover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #198754, #0d6efd);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
  }
  
  .book-now-button:hover .btn-bg-hover {
    opacity: 1;
  }
  
  /* Trust badges */
  .trust-badges {
    border-top: 1px dashed #dee2e6;
    padding-top: 15px;
  }
  
  .trust-item {
    background-color: #f8f9fa;
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  
  .trust-item:hover {
    background-color: #e9ecef;
    transform: translateY(-2px);
  }
  
  /* Gallery Styles */
  .gallery-container {
    overflow: hidden;
  }
  
  .main-image-container {
    height: 400px;
    overflow: hidden;
  }
  
  .main-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .main-image-container img:hover {
    transform: scale(1.05);
  }
  
  .thumbnails-container {
    display: flex;
    flex-direction: column;
    height: 400px;
  }
  
  .thumbnail-item {
    height: 25%;
    overflow: hidden;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }
  
  .thumbnail-item:hover {
    opacity: 0.8;
  }
  
  .thumbnail-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .more-overlay {
    position: relative;
  }
  
  .more-text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }
  
  .more-text:hover {
    background-color: rgba(0,0,0,0.7);
  }
  
  /* Tab styles */
  .nav-tabs .nav-link {
    color: #6c757d;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }
  
  .nav-tabs .nav-link.active {
    color: #0d6efd;
    border-bottom-color: #0d6efd;
    background-color: transparent;
  }
  
  .nav-tabs .nav-link:hover:not(.active) {
    border-bottom-color: #dee2e6;
  }
  
  /* Description */
  .activity-description {
    line-height: 1.8;
    font-size: 16px;
    padding: 10px;
    background-color: #fff;
    border-radius: 8px;
  }
  
  .activity-description p {
    margin-bottom: 1.5rem;
  }
  
  .activity-description p:last-child {
    margin-bottom: 0;
  }
  
  .activity-description img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 1.5rem 0;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
  }
  
  .activity-description img:hover {
    transform: scale(1.02);
  }
  
  .activity-description ul,
  .activity-description ol {
    padding-left: 25px;
    margin-bottom: 20px;
  }
  
  .activity-description h1, 
  .activity-description h2, 
  .activity-description h3 {
    color: #6f42c1;
    margin-top: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .activity-description a {
    color: #0d6efd;
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .activity-description a:hover {
    color: #0a58ca;
    text-decoration: underline;
  }
  
  /* Badges and buttons */
  .badge {
    padding: 0.5rem 0.8rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .badge:hover {
    opacity: 0.9;
  }
  
  /* Key details boxes */
  .border.rounded-3 {
    transition: all 0.3s ease;
  }
  
  .border.rounded-3:hover {
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
    transform: translateY(-2px);
  }
  
  /* Animation styles */
  .pulse-animation {
    animation: pulse-effect 0.3s ease;
  }
  
  @keyframes pulse-effect {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  
  .highlight-text {
    animation: highlight-effect 0.5s ease;
  }
  
  @keyframes highlight-effect {
    0% { color: #0d6efd; }
    50% { color: #198754; }
    100% { color: #0d6efd; }
  }
  
  .btn-lg-pulse {
    animation: btn-pulse 1s infinite;
  }
  
  @keyframes btn-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.03); }
    100% { transform: scale(1); }
  }
  
  /* Booking form styles */
  .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #0d6efd;
  }
  
  /* Button styles */
  .btn-primary {
    transition: all 0.3s ease;
  }
  
  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Progress bar animation */
  .progress-bar {
    transition: width 1s ease;
  }
  
  /* Booking section */
  .sticky-top {
    transition: all 0.3s ease;
  }
  
  .card {
    transition: all 0.3s ease;
    border: none;
  }
  
  .card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
  }
  
  /* Gradient backgrounds */
  .bg-gradient-info {
    background: linear-gradient(135deg, #0dcaf0 0%, #0a92b3 100%);
  }
  
  .bg-gradient-primary {
    background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
  }
  
  .bg-gradient-description {
    background: linear-gradient(135deg, #6f42c1 0%, #4e2e8b 100%);
  }
  
  .bg-gradient-location {
    background: linear-gradient(135deg, #198754 0%, #115740 100%);
  }
  
  .bg-primary-subtle {
    background-color: rgba(13, 110, 253, 0.1);
  }
  
  /* Feature cards */
  .feature-card {
    transition: all 0.3s ease;
    border-radius: 12px;
  }
  
  .feature-card:hover {
    background-color: rgba(13, 110, 253, 0.05);
    transform: translateY(-5px);
  }
  
  .feature-icon {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }
  
  .feature-card:hover .feature-icon {
    transform: scale(1.1);
  }
  
  /* Price banner */
  .activity-price-banner {
    transition: all 0.3s ease;
  }
  
  .activity-price-banner:hover {
    background-color: #f8f9fa;
  }
  
  .availability-card {
    box-shadow: 0 3px 10px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
  }
  
  .availability-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 15px rgba(0,0,0,0.1);
  }
  
  .availability-card.available {
    background-color: rgba(13, 110, 253, 0.05);
    border-left: 3px solid #0d6efd;
  }
  
  .availability-card.booked {
    background-color: rgba(25, 135, 84, 0.05);
    border-left: 3px solid #198754;
  }
  
  .availability-status {
    background-color: #f8f9fa;
    border: 1px dashed #dee2e6;
  }
  
  /* Progress bar enhancement */
  .progress {
    overflow: visible;
    margin-top: 10px;
    margin-bottom: 26px;
    height: 10px;
  }
  
  .progress .progress-bar {
    position: relative;
    animation: animate-positive 2s;
    overflow: visible;
  }
  
  @keyframes animate-positive {
    0% { width: 0%; }
  }
  
  /* Input number controls */
  .input-group-text {
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .input-group-text:hover {
    background-color: #e9ecef;
  }
  
  /* Summary section */
  .summary-header {
    font-weight: 600;
    margin-bottom: 10px;
  }
  
  .summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  
  .summary-total {
    border-top: 1px solid #dee2e6;
    padding-top: 10px;
    margin-top: 10px;
    font-weight: 600;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 767px) {
    .sticky-top {
      position: relative !important;
      top: 0 !important;
    }
    
    .main-image-container, 
    .main-image-container img {
      height: 250px;
    }
    
    .thumbnails-container {
      height: auto;
      flex-direction: row;
      flex-wrap: wrap;
    }
    
    .thumbnail-item {
      width: 50%;
      height: 100px;
    }
    
    .thumbnail-item img {
      height: 100%;
    }
    
    .carousel-item img {
      height: 300px;
      object-fit: contain;
    }
  }
  
  /* Weather Information Styles */
  .bg-gradient-primary-to-secondary {
    background: linear-gradient(to right, #1e88e5, #512da8);
  }
  
  .weather-info {
    border-radius: 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .weather-details .temperature {
    line-height: 1;
  }
  
  .weather-details .description {
    text-transform: capitalize;
    font-size: 0.9rem;
    opacity: 0.9;
  }
  
  .weather-details-extended {
    font-size: 0.85rem;
  }
  
  .weather-detail-item {
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    height: 100%;
  }
  
  .weather-detail-item .label {
    font-size: 0.8rem;
    opacity: 0.8;
  }
  
  .weather-detail-item .value {
    font-weight: 600;
    font-size: 1.1rem;
  }
</style>
{% endblock %}

{% block scripts %}
  <!-- All JavaScript in the chat assistant is already included in the template -->
{% endblock %}