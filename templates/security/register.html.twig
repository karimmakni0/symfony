{% extends 'base.html.twig' %}

{% block title %}Register - GoTrip{% endblock %}

{% block body %}
<!-- Add FontAwesome for better icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<!-- Add hCaptcha script -->
<script src="https://js.hcaptcha.com/1/api.js" async defer></script>
<!-- Add SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Add Face-API.js for Face ID -->
<script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
<section class="layout-pt-lg layout-pb-lg bg-blue-2">
    <div class="container">
        <div class="row justify-center">
            <div class="col-xl-6 col-lg-7 col-md-9">
                <div class="px-50 py-50 sm:px-20 sm:py-20 bg-white shadow-4 rounded-4">
                    <div class="row y-gap-20">
                        <div class="col-12 text-center">
                            <div class="size-60 flex-center bg-blue-1 rounded-full mx-auto mb-10">
                                <i class="fa fa-user-plus text-24 text-white"></i>
                            </div>
                            <h1 class="text-30 fw-600">Create an Account</h1>
                            <p class="mt-10">Already have an account? <a href="{{ path('app_login') }}" class="text-blue-1 fw-500"><i class="fa fa-sign-in-alt me-1"></i> Log in</a></p>
                        </div>

                        {% for message in app.flashes('success') %}
                            <div class="col-12">
                                <div class="py-10 px-20 rounded-4 bg-green-1 text-white">
                                    {{ message }}
                                </div>
                            </div>
                        {% endfor %}

                        {% for message in app.flashes('error') %}
                            <div class="col-12">
                                <div class="py-10 px-20 rounded-4 bg-red-3 text-white">
                                    {{ message }}
                                </div>
                            </div>
                        {% endfor %}

                        <form method="POST" action="{{ path('app_register') }}" class="row y-gap-20">
                            <div class="col-12">
                                <div class="form-input">
                                    <input type="text" name="name" required>
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-user me-1"></i> First Name</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-input">
                                    <input type="text" name="lastname" required>
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-user me-1"></i> Last Name</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-input">
                                    <input type="email" name="email" required>
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-envelope me-1"></i> Email</label>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-input">
                                    <input type="text" name="phone" maxlength="20">
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-phone me-1"></i> Phone</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-input">
                                    <input type="date" name="birthday" class="has-value">
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-birthday-cake me-1"></i> Birthday</label>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-group mb-0">
                                    <label class="text-14 text-light-1 mb-1"><i class="fa fa-venus-mars me-1"></i> Gender</label>
                                    <select name="gender" class="form-select w-100" style="height: 50px; border-radius: 4px; border: 1px solid #ddd; padding: 0 15px;" required>
                                        <option value="" disabled selected>Select your gender</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-input">
                                    <input type="password" name="password" id="password" required>
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-lock me-1"></i> Password</label>
                                </div>
                            </div>
                            
                            <!-- Password strength meter -->
                            <div class="col-12">
                                <div class="password-strength-meter mt-5">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span class="text-14">Password strength:</span>
                                        <span class="text-14 fw-500" id="password-strength-text">None</span>
                                    </div>
                                    <div class="password-strength-bar mt-2 mb-2" style="display: flex; width: 100%; height: 8px; border-radius: 10px; overflow: hidden;">
                                        <div id="strength-segment-1" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                                        <div id="strength-segment-2" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                                        <div id="strength-segment-3" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                                        <div id="strength-segment-4" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; transition: background-color 0.3s ease;"></div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Password requirements -->
                            <div class="col-12 mt-10">
                                <div class="password-requirements">
                                    <p class="text-14 mb-2">Password must:</p>
                                    <ul class="text-14 text-light-1 ps-3" style="list-style-type: none;">
                                        <li id="length-check"><i class="fa fa-times-circle text-danger me-1"></i> Be at least 8 characters long</li>
                                        <li id="uppercase-check"><i class="fa fa-times-circle text-danger me-1"></i> Include an uppercase letter</li>
                                        <li id="number-check"><i class="fa fa-times-circle text-danger me-1"></i> Include a number</li>
                                        <li id="special-check"><i class="fa fa-times-circle text-danger me-1"></i> Include a special character</li>
                                    </ul>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="form-input">
                                    <input type="password" name="confirm_password" id="password_confirm" required>
                                    <label class="lh-1 text-14 text-light-1"><i class="fa fa-check-circle me-1"></i> Confirm Password</label>
                                </div>
                            </div>


                            <!-- Add hCaptcha widget before the submit button -->
                            <div class="col-12 d-flex justify-center mt-15">
                                <div class="h-captcha" data-sitekey="579e1b04-d52c-4bf4-be44-9704c79a23a0"></div>
                            </div>

                            <div class="col-12 d-flex justify-center mt-25">
                                <button type="submit" class="button py-20 -dark-1 bg-blue-1 text-white w-100 rounded-pill" style="max-width: 80%; min-width: 300px;">
                                    <i class="fa fa-user-plus me-2"></i> <span class="fw-500 text-16">Register</span>
                                </button>
                            </div>
                            
                            <div class="col-12 text-center mt-15">
                                <p class="text-14 text-light-1">By registering, you agree to GoTrip's <a href="#" class="text-blue-1">Terms of Service</a> and <a href="#" class="text-blue-1">Privacy Policy</a>.</p>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Password validation script -->
<script>
let faceidSetupRequested = false;
let faceidModelsLoaded = false;
let currentStream = null;

async function checkFaceIdSupport() {
    try {
        // Check if camera is available
        const devices = await navigator.mediaDevices.enumerateDevices();
        const videoDevices = devices.filter(device => device.kind === 'videoinput');
        
        // FaceAPI.js availability is implied by script loading
        return videoDevices.length > 0;
    } catch (error) {
        console.error('Error checking Face ID support:', error);
        return false;
    }
}

async function loadFaceIdModels() {
    try {
        await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');
        await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
        await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
        faceidModelsLoaded = true;
        return true;
    } catch (error) {
        console.error('Error loading Face ID models:', error);
        return false;
    }
}

async function initializeFaceIdSetup() {
    const isFaceIdSupported = await checkFaceIdSupport();
    const faceIdCheckbox = document.getElementById('setup_faceid');
    const faceIdContainer = document.getElementById('faceIdSetupContainer');
    const registerForm = document.querySelector('form[action="{{ path('app_register') }}"]');
    
    if (!isFaceIdSupported) {
        faceIdCheckbox.disabled = true;
        faceIdCheckbox.checked = false;
        faceIdCheckbox.parentElement.classList.add('opacity-50');
        faceIdCheckbox.parentElement.title = 'Face ID is not supported on your device';
        return;
    }
    
    faceIdCheckbox.addEventListener('change', function() {
        faceIdContainer.style.display = this.checked ? 'block' : 'none';
        faceidSetupRequested = this.checked;
    });
    
    // If Face ID is requested, handle it after form submission
    registerForm.addEventListener('submit', async function(e) {
        // Only intercept if Face ID is requested
        if (faceidSetupRequested) {
            e.preventDefault();
            
            // Validate form first
            if (!this.checkValidity()) {
                this.reportValidity();
                return;
            }
            
            // Prepare form data
            const formData = new FormData(this);
            const formObject = {};
            formData.forEach((value, key) => {
                formObject[key] = value;
            });
            
            // Basic client-side validation
            if (formObject.password !== formObject.confirm_password) {
                Swal.fire({
                    title: 'Error',
                    text: 'Passwords do not match',
                    icon: 'error',
                    confirmButtonColor: '#3554D1'
                });
                return;
            }
            
            // Start Face ID setup process
            await setupFaceId(formObject);
        }
    });
}

async function setupFaceId(formData) {
    // Check if models are loaded
    if (!faceidModelsLoaded) {
        const loadingText = 'Loading Face ID models...';
        Swal.fire({
            title: 'Setting Up Face ID',
            text: loadingText,
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        
        const modelsLoaded = await loadFaceIdModels();
        if (!modelsLoaded) {
            Swal.fire({
                title: 'Error',
                text: 'Failed to load Face ID models',
                icon: 'error',
                confirmButtonColor: '#3554D1'
            });
            submitFormWithoutFaceId();
            return;
        }
    }
    
    Swal.fire({
        title: 'Face ID Setup',
        html: `
            <div class="text-center mb-20">
                <p>Please position your face in the frame</p>
                <video id="faceVideo" width="400" height="300" autoplay style="border-radius: 8px; margin: 0 auto;"></video>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Register Face ID',
        confirmButtonColor: '#3554D1',
        cancelButtonText: 'Skip',
        allowOutsideClick: false,
        willOpen: () => {
            startCamera('faceVideo');
        },
        didClose: () => {
            stopCamera();
        }
    }).then(async (result) => {
        if (result.isConfirmed) {
            const faceData = await captureFaceData();
            if (faceData) {
                // Add Face ID data to form data
                formData.faceIdData = JSON.stringify(faceData);
                formData.faceidEnabled = true;
                
                // Submit the registration with Face ID
                registerWithFaceId(formData);
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'Failed to capture your face. Continuing without Face ID.',
                    icon: 'error',
                    confirmButtonColor: '#3554D1'
                }).then(() => {
                    submitFormWithoutFaceId();
                });
            }
        } else {
            // User canceled Face ID setup
            submitFormWithoutFaceId();
        }
    });
}

async function startCamera(videoElementId) {
    try {
        const constraints = {
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                facingMode: 'user'
            }
        };
        
        currentStream = await navigator.mediaDevices.getUserMedia(constraints);
        const videoElement = document.getElementById(videoElementId);
        videoElement.srcObject = currentStream;
    } catch (error) {
        console.error('Error starting camera:', error);
        Swal.fire({
            title: 'Camera Error',
            text: 'Could not access your camera. Please check permissions.',
            icon: 'error',
            confirmButtonColor: '#3554D1'
        }).then(() => {
            submitFormWithoutFaceId();
        });
    }
}

function stopCamera() {
    if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
        currentStream = null;
    }
}

async function captureFaceData() {
    try {
        const videoElement = document.getElementById('faceVideo');
        if (!videoElement || !videoElement.srcObject) return null;
        
        // Detect face
        const detections = await faceapi.detectSingleFace(videoElement)
            .withFaceLandmarks()
            .withFaceDescriptor();
        
        if (!detections) return null;
        
        // Convert to a simpler format for storage
        return Array.from(detections.descriptor);
    } catch (error) {
        console.error('Error capturing face data:', error);
        return null;
    }
}

function submitFormWithoutFaceId() {
    const form = document.querySelector('form[action="{{ path('app_register') }}"]');
    form.submit();
}

async function registerWithFaceId(formData) {
    Swal.fire({
        title: 'Registering Account',
        text: 'Please wait while we create your account with Face ID...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
    
    try {
        // First submit the form normally to create the account
        const form = document.querySelector('form[action="{{ path('app_register') }}"]');
        const formDataObj = new FormData(form);
        
        // Add Face ID flag to indicate this user wants Face ID
        formDataObj.append('faceid_setup', 'true');
        
        // Submit the form
        form.submit();
        
        // The Face ID data will be passed as a session variable to be used after account verification
        sessionStorage.setItem('pending_faceid_data', formData.faceIdData);
        
        // Note: The actual Face ID registration will happen after email verification
        // in this flow. The controller needs to be modified to handle this properly.
    } catch (error) {
        console.error('Error registering with Face ID:', error);
        Swal.fire({
            title: 'Registration Error',
            text: 'There was an error during registration. Please try again without Face ID.',
            icon: 'error',
            confirmButtonColor: '#3554D1'
        }).then(() => {
            submitFormWithoutFaceId();
        });
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Initialize Face ID setup
    initializeFaceIdSetup();
    
    const passwordInput = document.getElementById('password');
    const confirmInput = document.getElementById('password_confirm');
    const strengthMeter = document.getElementById('password-strength-meter');
    const strengthText = document.getElementById('password-strength-text');
    const lengthCheck = document.getElementById('length-check');
    const uppercaseCheck = document.getElementById('uppercase-check');
    const numberCheck = document.getElementById('number-check');
    const specialCheck = document.getElementById('special-check');
    
    const updatePasswordStrength = function() {
        const password = passwordInput.value;
        let strength = 0;
        let message = 'None';
        let segmentColors = ['#eee', '#eee', '#eee', '#eee'];
        
        // Update individual checks
        if (password.length >= 8) {
            lengthCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Be at least 8 characters long';
            strength += 25;
        } else {
            lengthCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Be at least 8 characters long';
        }
        
        if (/[A-Z]/.test(password)) {
            uppercaseCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include an uppercase letter';
            strength += 25;
        } else {
            uppercaseCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include an uppercase letter';
        }
        
        if (/[0-9]/.test(password)) {
            numberCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include a number';
            strength += 25;
        } else {
            numberCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include a number';
        }
        
        if (/[^A-Za-z0-9]/.test(password)) {
            specialCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include a special character';
            strength += 25;
        } else {
            specialCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include a special character';
        }
        
        // Update strength meter visual segments
        if (strength >= 25) {
            segmentColors[0] = '#dc3545'; // danger/red
        } 
        if (strength >= 50) {
            segmentColors[0] = '#ffc107'; // warning/yellow
            segmentColors[1] = '#ffc107';
        } 
        if (strength >= 75) {
            segmentColors[0] = '#0dcaf0'; // info/blue
            segmentColors[1] = '#0dcaf0';
            segmentColors[2] = '#0dcaf0';
        } 
        if (strength >= 100) {
            segmentColors[0] = '#198754'; // success/green
            segmentColors[1] = '#198754';
            segmentColors[2] = '#198754';
            segmentColors[3] = '#198754';
        }
        
        // Set segment colors
        for (let i = 1; i <= 4; i++) {
            document.getElementById('strength-segment-' + i).style.backgroundColor = segmentColors[i-1];
        }
        
        // Update strength message
        if (strength == 0) {
            message = 'None';
        } else if (strength <= 25) {
            message = 'Weak';
        } else if (strength <= 50) {
            message = 'Fair';
        } else if (strength <= 75) {
            message = 'Good';
        } else {
            message = 'Strong';
        }
        
        strengthText.textContent = message;
    };
    
    // Check password match
    const checkPasswordMatch = function() {
        if (confirmInput.value && passwordInput.value !== confirmInput.value) {
            confirmInput.setCustomValidity('Passwords do not match');
        } else {
            confirmInput.setCustomValidity('');
        }
    };
    
    passwordInput.addEventListener('input', function() {
        updatePasswordStrength();
        checkPasswordMatch();
    });
    
    confirmInput.addEventListener('input', checkPasswordMatch);
    
    // Initialize
    updatePasswordStrength();
});
</script>
{% endblock %}
