{% extends 'base.html.twig' %}

{% block title %}Reset Password{% endblock %}

{% block body %}
<!-- Add FontAwesome for better icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<!-- Add hCaptcha script -->
<script src="https://js.hcaptcha.com/1/api.js" async defer></script>
<!-- Add SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<section class="layout-pt-lg layout-pb-lg bg-blue-2">
  <div class="container">
    <div class="row justify-center">
      <div class="col-xl-6 col-lg-7 col-md-9">
        <div class="px-50 py-50 sm:px-20 sm:py-20 bg-white shadow-4 rounded-4">
          <div class="row y-gap-20">
            <div class="col-12 text-center">
              <div class="size-60 flex-center bg-blue-1 rounded-full mx-auto mb-10">
                <i class="fa fa-shield-alt text-24 text-white"></i>
              </div>
              <h1 class="text-30 fw-600">Create New Password</h1>
              <p class="mt-10">Enter your new password below.</p>
            </div>

            {# Flash messages will be handled by SweetAlert #}

            <form action="{{ path('app_reset_password', {'token': token}) }}" method="post" class="row y-gap-20">
                <div class="col-12">
                    <div class="form-input">
                        <input type="password" name="password" id="password" class="has-value" placeholder=" " required>
                        <label class="lh-1 text-14 text-light-1"><i class="fa fa-lock me-1"></i> New Password</label>
                    </div>
                </div>
                
                <!-- Password strength meter -->
                <div class="col-12">
                    <div class="password-strength-meter mt-5">
                        <div class="d-flex justify-content-between mb-1">
                            <span class="text-14">Password strength:</span>
                            <span class="text-14 fw-500" id="password-strength-text">None</span>
                        </div>
                        <div class="password-strength-bar mt-2 mb-2" style="display: flex; width: 100%; height: 8px; border-radius: 10px; overflow: hidden;">
                            <div id="strength-segment-1" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                            <div id="strength-segment-2" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                            <div id="strength-segment-3" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; margin-right: 3px; transition: background-color 0.3s ease;"></div>
                            <div id="strength-segment-4" class="strength-segment" style="flex: 1; height: 100%; background-color: #eee; transition: background-color 0.3s ease;"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Password requirements -->
                <div class="col-12 mt-10">
                    <div class="password-requirements">
                        <p class="text-14 mb-2">Password must:</p>
                        <ul class="text-14 text-light-1 ps-3" style="list-style-type: none;">
                            <li id="length-check"><i class="fa fa-times-circle text-danger me-1"></i> Be at least 8 characters long</li>
                            <li id="uppercase-check"><i class="fa fa-times-circle text-danger me-1"></i> Include an uppercase letter</li>
                            <li id="number-check"><i class="fa fa-times-circle text-danger me-1"></i> Include a number</li>
                            <li id="special-check"><i class="fa fa-times-circle text-danger me-1"></i> Include a special character</li>
                        </ul>
                    </div>
                </div>



                <div class="col-12">
                    <div class="form-input">
                        <input type="password" name="password_confirm" id="password_confirm" class="has-value" placeholder=" " required>
                        <label class="lh-1 text-14 text-light-1"><i class="fa fa-check-circle me-1"></i> Confirm New Password</label>
                    </div>
                </div>

                <input type="hidden" name="_csrf_token" value="{{ csrf_token('reset_password') }}">
                <input type="hidden" name="token" value="{{ token }}">

                <!-- Add hCaptcha widget -->
                <div class="col-12 d-flex justify-center mt-10">
                    <div class="h-captcha" data-sitekey="{{ hcaptcha_sitekey }}" data-theme="light"></div>
                </div>

                <div class="col-12 d-flex justify-center mt-15">
                    <button type="submit" class="button py-20 -dark-1 bg-blue-1 text-white w-100 rounded-pill" style="max-width: 80%; min-width: 300px;">
                        <i class="fa fa-lock me-2"></i> <span class="fw-500 text-16">Reset Password</span>
                    </button>
                </div>
            </form>

            <div class="row y-gap-20 pt-30">
                <div class="col-12 text-center">
                    <a href="{{ path('app_login') }}" class="text-14 text-blue-1 fw-500"><i class="fa fa-arrow-left me-1"></i> Back to login</a>
                </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block stylesheets %}
<style>
  /* Password strength meter */
  .password-strength-meter {
    display: flex;
    gap: 5px;
    height: 8px;
    width: 100%;
  }
  
  .strength-segment {
    flex: 1;
    background-color: #e9ecef;
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  /* Password strength colors */
  .strength-weak .strength-segment:nth-child(1) {
    background-color: #dc3545;
  }
  
  .strength-fair .strength-segment:nth-child(1),
  .strength-fair .strength-segment:nth-child(2) {
    background-color: #ffc107;
  }
  
  .strength-good .strength-segment:nth-child(1),
  .strength-good .strength-segment:nth-child(2),
  .strength-good .strength-segment:nth-child(3) {
    background-color: #28a745;
  }
  
  .strength-strong .strength-segment {
    background-color: #3554D1;
  }
  
  /* Password strength text colors */
  .strength-weak #strength-text {
    color: #dc3545;
    font-weight: 500;
  }
  
  .strength-fair #strength-text {
    color: #ffc107;
    font-weight: 500;
  }
  
  .strength-good #strength-text {
    color: #28a745;
    font-weight: 500;
  }
  
  .strength-strong #strength-text {
    color: #3554D1;
    font-weight: 500;
  }
  
  /* Password requirements styling */
  .password-requirements {
    background-color: #f8f9fa;
    border-left: 4px solid #3554D1;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
  }
  
  .password-requirements:hover {
    box-shadow: 0 8px 20px rgba(0,0,0,0.1);
  }
  
  .password-req-item {
    transition: all 0.3s ease;
  }
  
  .password-req-item:hover {
    transform: translateX(5px);
  }
</style>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle flash messages with SweetAlert
        {% for message in app.flashes('success') %}
            Swal.fire({
                title: 'Success!',
                text: "{{ message }}",
                icon: 'success',
                confirmButtonColor: '#3554D1',
                confirmButtonText: 'OK'
            });
        {% endfor %}

        {% for message in app.flashes('error') %}
            Swal.fire({
                title: 'Error!',
                text: "{{ message }}",
                icon: 'error',
                confirmButtonColor: '#3554D1',
                confirmButtonText: 'OK'
            });
        {% endfor %}
        
        // Password validation logic
        const passwordInput = document.getElementById('password');
        const confirmInput = document.getElementById('password_confirm');
        const strengthText = document.getElementById('password-strength-text');
        const lengthCheck = document.getElementById('length-check');
        const uppercaseCheck = document.getElementById('uppercase-check');
        const numberCheck = document.getElementById('number-check');
        const specialCheck = document.getElementById('special-check');
        
        if (passwordInput && strengthText) {
            const updatePasswordStrength = function() {
                const password = passwordInput.value;
                let strength = 0;
                let message = 'None';
                let segmentColors = ['#eee', '#eee', '#eee', '#eee'];
                
                // Update individual checks
                if (password.length >= 8) {
                    lengthCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Be at least 8 characters long';
                    strength += 25;
                } else {
                    lengthCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Be at least 8 characters long';
                }
                
                if (/[A-Z]/.test(password)) {
                    uppercaseCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include an uppercase letter';
                    strength += 25;
                } else {
                    uppercaseCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include an uppercase letter';
                }
                
                if (/[0-9]/.test(password)) {
                    numberCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include a number';
                    strength += 25;
                } else {
                    numberCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include a number';
                }
                
                if (/[^A-Za-z0-9]/.test(password)) {
                    specialCheck.innerHTML = '<i class="fa fa-check-circle text-success me-1"></i> Include a special character';
                    strength += 25;
                } else {
                    specialCheck.innerHTML = '<i class="fa fa-times-circle text-danger me-1"></i> Include a special character';
                }
                
                // Update strength meter visual segments
                if (strength >= 25) {
                    segmentColors[0] = '#dc3545'; // danger/red
                } 
                if (strength >= 50) {
                    segmentColors[0] = '#ffc107'; // warning/yellow
                    segmentColors[1] = '#ffc107';
                } 
                if (strength >= 75) {
                    segmentColors[0] = '#0dcaf0'; // info/blue
                    segmentColors[1] = '#0dcaf0';
                    segmentColors[2] = '#0dcaf0';
                } 
                if (strength >= 100) {
                    segmentColors[0] = '#198754'; // success/green
                    segmentColors[1] = '#198754';
                    segmentColors[2] = '#198754';
                    segmentColors[3] = '#198754';
                }
                
                // Set segment colors
                for (let i = 1; i <= 4; i++) {
                    document.getElementById('strength-segment-' + i).style.backgroundColor = segmentColors[i-1];
                }
                
                // Update strength message
                if (strength == 0) {
                    message = 'None';
                } else if (strength <= 25) {
                    message = 'Weak';
                } else if (strength <= 50) {
                    message = 'Fair';
                } else if (strength <= 75) {
                    message = 'Good';
                } else {
                    message = 'Strong';
                }
                
                strengthText.textContent = message;
            };
            
            // Check password match
            const checkPasswordMatch = function() {
                if (confirmInput.value && passwordInput.value !== confirmInput.value) {
                    confirmInput.setCustomValidity('Passwords do not match');
                } else {
                    confirmInput.setCustomValidity('');
                }
            };
            
            passwordInput.addEventListener('input', function() {
                updatePasswordStrength();
                checkPasswordMatch();
            });
            
            confirmInput.addEventListener('input', checkPasswordMatch);
            
            // Initialize
            updatePasswordStrength();
            
            // Password match validation
            const form = confirmInput.closest('form');
            form.addEventListener('submit', function(event) {
                if (passwordInput.value !== confirmInput.value) {
                  event.preventDefault();
                  alert("Passwords don't match. Please try again.");
                }
            });
        }
    });
</script>
{{ parent() }}
{% endblock %}
