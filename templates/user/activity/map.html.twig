{% extends 'base.html.twig' %}

{% block title %}Activities Map - Go Trip{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mapbox-gl-controls@2.3.5/lib/controls.min.css" /> 
<style>
    /* Map container and controls */
    .activities-map-container {
        position: sticky;
        top: 80px;
    }
    
    #map {
        width: 100% !important;
        height: 700px !important;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        position: relative !important;
        overflow: hidden;
    }
    
    .map-3d-controls {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1;
        background: white;
        border-radius: 4px;
        padding: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    
    .map-3d-controls button {
        display: block;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 5px 10px;
        margin: 5px 0;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .map-3d-controls button:hover {
        background: #f0f0f0;
    }
    
    .map-3d-controls button.active {
        background-color: var(--color-blue-1);
        color: white;
    }
    
    .map-filter-bar {
        background: white;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        margin-bottom: 20px;
    }
    
    /* Filter toggles */
    .map-type-toggle {
        background-color: white;
        border: 1px solid #e5e5e5;
        border-radius: 30px;
        padding: 5px;
        display: inline-flex;
        margin-bottom: 15px;
    }
    
    .map-type-toggle button {
        border: none;
        padding: 8px 15px;
        border-radius: 30px;
        background: none;
        font-weight: 500;
        font-size: 14px;
        cursor: pointer;
    }
    
    .map-type-toggle button.active {
        background-color: var(--color-blue-1);
        color: white;
    }
    
    /* Marker and popup styles */
    .map-popup {
        width: 300px;
    }
    
    .popup-image-container {
        width: 100%;
        height: 150px;
        overflow: hidden;
        border-radius: 8px 8px 0 0;
    }
    
    .popup-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .popup-content {
        padding: 15px;
    }
    
    .popup-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 10px;
        color: #051036;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .popup-meta {
        margin-bottom: 10px;
    }
    
    .popup-meta-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
        font-size: 13px;
    }
    
    .popup-meta-item i {
        margin-right: 5px;
        font-size: 14px;
    }
    
    .popup-price {
        font-size: 18px;
        font-weight: 600;
        color: #3554D1;
    }
    
    .mapboxgl-popup-content {
        padding: 0;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    /* Custom markers */
    .marker {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .marker:hover {
        transform: scale(1.2);
        z-index: 2;
    }
    
    .marker i {
        font-size: 16px;
        color: white;
    }
    
    /* Activity card styles */
    .map-activity-card {
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        margin-bottom: 20px;
        border: 1px solid #e5e5e5;
        background-color: white;
    }
    
    .map-activity-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .map-activity-card__image {
        height: 200px;
        overflow: hidden;
        position: relative;
    }
    
    .map-activity-card__image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s;
    }
    
    .map-activity-card:hover .map-activity-card__image img {
        transform: scale(1.05);
    }
    
    .map-activity-card__content {
        padding: 20px;
    }
    
    .map-activity-card__badge {
        position: absolute;
        top: 15px;
        left: 15px;
        padding: 6px 12px;
        border-radius: 30px;
        font-size: 12px;
        font-weight: 500;
        z-index: 1;
    }
    
    .map-activity-card__location {
        display: flex;
        align-items: center;
        color: var(--color-dark-1);
        font-size: 14px;
        margin-bottom: 5px;
    }
    
    .map-activity-card__title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 10px;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .map-activity-card__meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 15px;
    }
    
    .map-activity-card__price {
        color: var(--color-blue-1);
        font-size: 20px;
        font-weight: 600;
    }
    
    /* Legend styles */
    .legend-container {
        padding: 15px 20px;
        border-radius: 12px;
        background-color: rgba(53, 84, 209, 0.05);
        margin-bottom: 20px;
    }
    
    .legend-marker {
        width: 24px;
        height: 24px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
    }
    
    /* Cluster styles */
    .mapboxgl-cluster {
        background-color: #3554D1;
        color: white;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
    
    /* Responsive adjustments */
    @media (max-width: 991px) {
        .activities-map-container {
            position: relative;
            top: 0;
            margin-bottom: 30px;
        }
        
        #map {
            height: 500px;
        }
    }
    
    .legend-marker {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .item-filter {
        transition: all 0.2s ease;
    }
    
    .item-filter:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 10px rgba(0,0,0,0.1);
    }
    
    .item-filter.active {
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    
    @keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
    
    .map-activity-card {
        transition: all 0.3s ease;
    }
</style>
{% endblock %}

{% block body %}
<section class="layout-pt-md layout-pb-lg">
    <div class="container">
        <div class="row">
            <div class="col-12 mb-30">
                <div class="d-flex items-center justify-between">
                    <h2 class="text-22 fw-500">Discover Activities by Location</h2>
                    <a href="{{ path('app_activities') }}" class="button -blue-1 bg-blue-1-05 text-blue-1 py-5 px-20 rounded-4">
                        <i class="icon-list mr-10"></i>View All Activities
                    </a>
                </div>
            </div>
            
            <!-- Map Filters -->
            <div class="col-12 mb-30">
                <div class="map-filter-bar">
                    <div class="row y-gap-10 justify-between items-center">
                        <div class="col-auto">
                            <div class="map-type-toggle">
                                <button class="js-map-view active">Map View</button>
                                <button class="js-list-view">List View</button>
                            </div>
                        </div>
                        <div class="col-auto">
                            <div class="d-flex items-center x-gap-15">
                                <select class="form-select js-filter-by-type" id="activityTypeFilter" style="min-width: 180px;">
                                    <option value="all">All Activity Types</option>
                                    {% for type in activityTypes %}
                                        <option value="{{ type }}">{{ type }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-12 js-map-view-container">
                <!-- Map Container -->
                <div class="activities-map-container">
                    <div class="rounded-4 border-light overflow-hidden position-relative">
                        <div id="map"></div>
                        <div class="map-3d-controls">
                            <button id="toggle3D" class="active">3D View</button>
                            <button id="rotate-left"><i class="icon-arrow-left"></i> Rotate</button>
                            <button id="rotate-right">Rotate <i class="icon-arrow-right"></i></button>
                            <button id="tilt-up"><i class="icon-arrow-up"></i> Tilt</button>
                            <button id="tilt-down">Tilt <i class="icon-arrow-down"></i></button>
                            <button id="reset-view">Reset View</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-12 js-list-view-container" style="display: none;">
                <!-- Legend -->
                <div class="mb-20">
                    <div class="py-15 px-20 rounded-4 border-light bg-white shadow-3">
                        <div class="d-flex justify-center items-center mb-15">
                            <h4 class="text-18 fw-500 text-dark-1">
                                <i class="icon-map-marker text-blue-1 text-18 me-5"></i>
                                Activity Categories
                            </h4>
                        </div>
                        <div class="row y-gap-15 x-gap-10 justify-center">
                            {% for type in activityTypes %}
                                {% set color = {  
                                    'Adventure': '#4CAF50',
                                    'Cultural': '#9C27B0',
                                    'Romantic': '#e91e63',
                                    'Educational': '#ff9800',
                                    'Sport': '#2196f3',
                                    'Food': '#FF5722',
                                    'Nature': '#009688',
                                    'Relaxation': '#03a9f4',
                                    'Beach': '#FFC107',
                                    'Other': '#607d8b'
                                } %}
                                {% set bgColor = color[type] ?? '#607d8b' %}
                                <div class="col-auto">
                                    <div class="item-filter px-15 py-10 rounded-100 pointer" 
                                         style="background-color: {{ bgColor }}15; border: 1px solid {{ bgColor }}; cursor: pointer;"
                                         data-type="{{ type }}" onclick="selectTypeFilter('{{ type }}', this)">
                                        <div class="d-flex items-center">
                                            <div class="size-30 flex-center rounded-full mr-10" style="background-color: {{ bgColor }};">
                                                <i class="icon-location-pin text-white text-12"></i>
                                            </div>
                                            <div class="fw-500 text-dark-1">{{ type }}</div>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                        
                        <div class="d-flex justify-center mt-15">
                            <button class="button -md -blue-1 bg-blue-1-05 text-blue-1 rounded-100" onclick="clearActivityFilter()">
                                <i class="icon-close text-14 mr-5"></i>Clear Filter
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Activity List -->
                <div class="js-activity-list">
                    <div class="row x-gap-20 y-gap-20">
                        {% for activity in activities %}
                            <div class="col-lg-3 col-md-4 col-sm-6">
                                <div class="map-activity-card h-100" data-id="{{ activity.activity_id }}" data-type="{{ activity.activity_genre }}">
                                    <div class="map-activity-card__image">
                                        <div class="map-activity-card__badge" style="background-color: {% if activity.activity_genre == 'Adventure' %}#4CAF50{% elseif activity.activity_genre == 'Cultural' %}#9C27B0{% elseif activity.activity_genre == 'Romantic' %}#e91e63{% elseif activity.activity_genre == 'Educational' %}#ff9800{% elseif activity.activity_genre == 'Sport' %}#2196f3{% elseif activity.activity_genre == 'Food' %}#FF5722{% elseif activity.activity_genre == 'Nature' %}#009688{% elseif activity.activity_genre == 'Relaxation' %}#03a9f4{% elseif activity.activity_genre == 'Beach' %}#FFC107{% else %}#607d8b{% endif %}; color: white;">
                                            {{ activity.activity_genre }}
                                        </div>
                                        {% if activity.resources and activity.resources|length > 0 %}
                                            <img src="{{ activity.resources[0].path }}" alt="{{ activity.activity_name }}">
                                        {% else %}
                                            <img src="{{ asset('assets/img/activities/placeholder.jpg') }}" alt="{{ activity.activity_name }}">
                                        {% endif %}
                                    </div>
                                    <div class="map-activity-card__content">
                                        <div class="map-activity-card__location">
                                            <i class="icon-map-marker text-blue-1 mr-5"></i>
                                            {{ activity.activity_destination }}
                                        </div>
                                        <h4 class="map-activity-card__title">
                                            <a href="/client/activities/{{ activity.activity_id }}" class="text-dark-1">
                                                {{ activity.activity_name }}
                                            </a>
                                        </h4>
                                        <div class="text-14 lh-15 text-light-1">
                                            <i class="icon-clock text-blue-1 mr-5"></i>
                                            {{ activity.activity_duration }}
                                        </div>
                                        <div class="map-activity-card__meta">
                                            <div class="map-activity-card__price">
                                                {{ activity.activity_price }} TND
                                            </div>
                                            <a href="/client/activities/{{ activity.activity_id }}" class="button -md -outline-blue-1 text-blue-1 bg-blue-1-05 rounded-4">
                                                <i class="icon-arrow-top-right text-14 mr-10"></i>
                                                View Details
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/mapbox-gl-controls@2.3.5/lib/controls.min.js"></script> -->

<script>
// Helper functions that need to be globally available for the onclick handlers
var map, activities, markers = [];

// Helper function to get color for activity type
function getColorForType(type) {
    const colorMap = {
        'Adventure': '#4CAF50',
        'Cultural': '#9C27B0',
        'Romantic': '#e91e63',
        'Educational': '#ff9800',
        'Sport': '#2196f3',
        'Food': '#FF5722',
        'Nature': '#009688',
        'Relaxation': '#03a9f4',
        'Beach': '#FFC107'
    };
    return colorMap[type] || '#607d8b';
}

// Function to select activity type filter
function selectTypeFilter(selectedType, clickedElement) {
    // Check if the filter is already active - toggle functionality
    let isAlreadyActive = false;
    if (clickedElement && clickedElement.classList.contains('active')) {
        isAlreadyActive = true;
    }
    
    // Update UI to show which filter is active
    document.querySelectorAll('.item-filter').forEach(function(filter) {
        filter.classList.remove('active');
        const type = filter.getAttribute('data-type');
        filter.style.backgroundColor = getColorForType(type) + '15'; // Reset all to inactive
    });
    
    // If the clicked filter was already active, we're essentially clearing the filter
    if (isAlreadyActive) {
        clearActivityFilter();
        return;
    }
    
    // Otherwise, activate the clicked filter
    if (clickedElement) {
        clickedElement.classList.add('active');
        clickedElement.style.backgroundColor = getColorForType(selectedType) + '30'; // More opacity for active
    }
    
    // Also update the dropdown if it exists
    const dropdown = document.querySelector('#activityTypeFilter');
    if (dropdown) dropdown.value = selectedType;
    
    let activityCards = document.querySelectorAll('.map-activity-card');
    
    // First hide all markers if map is initialized
    if (map) {
        map.getContainer().querySelectorAll('.mapboxgl-marker').forEach(function(marker) {
            marker.style.display = 'none';
        });
    }
    
    // Add transition effect to cards
    activityCards.forEach(function(card) {
        card.style.transition = 'opacity 0.3s ease';
    });
    
    // Filter cards and markers
    activityCards.forEach(function(card) {
        let cardType = card.getAttribute('data-type');
        if (cardType === selectedType) {
            card.style.opacity = '1';
            card.style.display = 'block';
        } else {
            card.style.opacity = '0.3';
            setTimeout(function() {
                card.style.display = 'none';
            }, 300);
        }
    });
    
    // Show only matching markers with animation
    if (map) {
        map.getContainer().querySelectorAll('.mapboxgl-marker').forEach(function(marker) {
            let activityId = marker.getAttribute('data-id');
            let activity = activities.find(a => a.activity_id.toString() === activityId);
            
            if (activity && activity.activity_genre === selectedType) {
                marker.style.display = 'block';
                marker.style.animation = 'bounce 0.5s';
                setTimeout(function() {
                    marker.style.animation = '';
                }, 500);
            }
        });
    }
    
    // If we're in list view, scroll to top of the filtered results
    if (document.querySelector('.js-list-view-container').style.display === 'block') {
        window.scrollTo({ top: document.querySelector('.js-list-view-container').offsetTop - 100, behavior: 'smooth' });
    }
}

// Function to clear activity filter
function clearActivityFilter() {
    console.log('Clearing all filters');
    
    // Reset all filter styles
    document.querySelectorAll('.item-filter').forEach(function(filter) {
        filter.classList.remove('active');
        const type = filter.getAttribute('data-type');
        filter.style.backgroundColor = getColorForType(type) + '15';
    });
    
    // Also reset the dropdown if it exists
    const dropdown = document.querySelector('#activityTypeFilter');
    if (dropdown) dropdown.value = 'all';
    
    // Show all activity cards with animation
    document.querySelectorAll('.map-activity-card').forEach(function(card) {
        card.style.transition = 'opacity 0.3s ease';
        card.style.opacity = '1';
        card.style.display = 'block';
    });
    
    // Make sure the markers array is available
    if (!markers || markers.length === 0) {
        console.warn('No markers found for clearing');
        return;
    }
    
    // Show all markers with subtle animation
    markers.forEach(function(marker) {
        marker.getElement().style.display = 'block';
        marker.getElement().style.transition = 'transform 0.3s ease';
        marker.getElement().style.transform = 'scale(1.1)';
        
        setTimeout(function() {
            marker.getElement().style.transform = 'scale(1)';
        }, 300);
    });
}

// Wait for document to be ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize activities data from Twig variable
    activities = {{ activities|json_encode|raw }};
    // Initialize Mapbox
    mapboxgl.accessToken = "{{ app.request.server.get('MAPBOX_API')|default('pk.eyJ1IjoibmloZWR4dG4iLCJhIjoiY205cmNmNDZoMHc3bTJpczQ3b3FodWVibCJ9.MBPaL38J-sYOaaw2BUQO0Q') }}";
    
    // Store activity types and their colors
    var activityColors = {
        'Adventure': '#4CAF50', // Green
        'Cultural': '#9C27B0', // Purple
        'Romantic': '#e91e63', // Pink
        'Educational': '#ff9800', // Orange
        'Sport': '#2196f3', // Blue
        'Relaxation': '#03a9f4', // Light Blue
        'Family': '#4caf50', // Green
        'Food': '#FF5722', // Deep Orange
        'Nature': '#009688', // Teal
        'Beach': '#FFC107', // Amber
        'Other': '#607d8b' // Blue Grey
    };
    
    // Make sure map container exists before initializing
    var mapContainer = document.getElementById('map');
    if (!mapContainer) {
        console.error('Map container not found');
        return;
    }
    
    // Create the map
    try {
        map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/satellite-streets-v12', // Satellite imagery with streets
            center: [9.5375, 33.8869], // Center on Tunisia
            zoom: 7,
            pitch: 60, // Tilted view for 3D effect
            bearing: 0, // Initial bearing (rotation)
            antialias: true // Smoother rendering
        });
        
        console.log('3D Map initialized successfully');
    } catch (e) {
        console.error('Error initializing map:', e);
        return;
    }
    
    // Add navigation controls and fullscreen option
    map.addControl(new mapboxgl.NavigationControl());
    map.addControl(new mapboxgl.FullscreenControl());
    
    // Basic controls only for now
    // map.addControl(new mapboxgl.ScaleControl({
    //     maxWidth: 100,
    //     unit: 'metric'
    // }));
    
    // Function to get color for activity type
    function getColorForType(type) {
        return activityColors[type] || '#607d8b';
    }
    
    function createMarkerElement(genre, activityId) {
        var el = document.createElement('div');
        el.className = 'marker activity-marker';
        el.style.backgroundColor = getColorForType(genre);
        el.innerHTML = '<i class="icon-location-pin"></i>';
        // Set attributes on the element to help with filtering
        el.setAttribute('data-type', genre);
        el.setAttribute('data-id', activityId);
        // Store type and id in dataset for easier access
        el.dataset.type = genre;
        el.dataset.id = activityId;
        return el;
    }
    
    // Function to create popup content
    function createPopupContent(activity) {
        var imageHtml = '';
        
        if (activity.resources && activity.resources.length > 0) {
            imageHtml = '<div class="popup-image-container">' +
                        '<img src="' + activity.resources[0].path + '" alt="' + activity.activity_name + '" class="popup-image">' +
                        '</div>';
        } else {
            imageHtml = '<div class="popup-image-container">' +
                        '<img src="/assets/img/activities/placeholder.jpg" alt="' + activity.activity_name + '" class="popup-image">' +
                        '</div>';
        }
        
        var contentHtml = '<div class="map-popup">' + 
                        imageHtml +
                        '<div class="popup-content">' +
                        '<h4 class="popup-title">' + activity.activity_name + '</h4>' +
                        '<div class="popup-meta">' +
                        '<div class="popup-meta-item">' +
                        '<i class="icon-map-marker text-blue-1"></i>' +
                        '<span>' + activity.activity_destination + '</span>' +
                        '</div>' +
                        '<div class="popup-meta-item">' +
                        '<i class="icon-clock text-blue-1"></i>' +
                        '<span>' + activity.activity_duration + '</span>' +
                        '</div>' +
                        '<div class="popup-meta-item">' +
                        '<i class="icon-tag text-blue-1"></i>' +
                        '<span>' + activity.activity_genre + '</span>' +
                        '</div>' +
                        '</div>' +
                        '<div class="popup-price">' +
                        '<span class="price-value">' + activity.activity_price + ' TND</span>' +
                        '</div>' +
                        '<a href="/client/activities/' + activity.activity_id.toString() + '" class="button -dark-1 py-10 px-20 -min-width-auto mt-15 w-100 text-center">' +
                        '<span class="text-14">View Details</span>' +
                        '</a>' +
                        '</div>' +
                        '</div>';
                        
        return contentHtml;
    }
    
    // Store all markers for filtering
    var markers = [];
    var activities = {{ activities|json_encode()|raw }};
    
    // Add legend colors to markers in the sidebar
    document.querySelectorAll('.legend-marker').forEach(function(marker) {
        var type = marker.getAttribute('data-type');
        marker.style.backgroundColor = getColorForType(type);
    });
    
    // Process map view and list view toggle
    var mapViewButton = document.querySelector('.js-map-view');
    var listViewButton = document.querySelector('.js-list-view');
    var mapViewContainer = document.querySelector('.js-map-view-container');
    var listViewContainer = document.querySelector('.js-list-view-container');
    
    mapViewButton.addEventListener('click', function() {
        mapViewButton.classList.add('active');
        listViewButton.classList.remove('active');
        mapViewContainer.style.display = 'block';
        listViewContainer.style.display = 'none';
        // Resize map when showing to ensure it renders correctly
        setTimeout(function() {
            map.resize();
        }, 50);
    });
    
    listViewButton.addEventListener('click', function() {
        listViewButton.classList.add('active');
        mapViewButton.classList.remove('active');
        listViewContainer.style.display = 'block';
        mapViewContainer.style.display = 'none';
    });
    
    // Activity type filter functionality
    // Function to select activity type filter
    function selectTypeFilter(selectedType, clickedElement) {
        console.log('Filtering by:', selectedType);
        
        // Check if the filter is already active - toggle functionality
        let isAlreadyActive = false;
        if (clickedElement && clickedElement.classList.contains('active')) {
            isAlreadyActive = true;
        }
        
        // Update UI to show which filter is active
        document.querySelectorAll('.item-filter').forEach(function(filter) {
            filter.classList.remove('active');
            const type = filter.getAttribute('data-type');
            filter.style.backgroundColor = getColorForType(type) + '15'; // Reset all to inactive
        });
        
        // If the clicked filter was already active, we're essentially clearing the filter
        if (isAlreadyActive) {
            clearActivityFilter();
            return;
        }
        
        // Otherwise, activate the clicked filter
        if (clickedElement) {
            clickedElement.classList.add('active');
            clickedElement.style.backgroundColor = getColorForType(selectedType) + '30'; // More opacity for active
        }
        
        // Also update the dropdown if it exists
        const dropdown = document.querySelector('#activityTypeFilter');
        if (dropdown) dropdown.value = selectedType;
        
        let activityCards = document.querySelectorAll('.map-activity-card');
        
        // Add transition effect to cards
        activityCards.forEach(function(card) {
            card.style.transition = 'opacity 0.3s ease';
        });
        
        // Filter cards
        activityCards.forEach(function(card) {
            let cardType = card.getAttribute('data-type');
            if (cardType === selectedType) {
                card.style.opacity = '1';
                card.style.display = 'block';
            } else {
                card.style.opacity = '0.3';
                setTimeout(function() {
                    card.style.display = 'none';
                }, 300);
            }
        });
        
        // Make sure the markers array is available and map is initialized
        if (!markers || markers.length === 0 || !map) {
            console.warn('No markers found for filtering or map not initialized');
            return;
        }
        
        console.log('Total markers:', markers.length);
        
        // Log out marker types for debugging
        console.log('Available marker types:');
        markers.forEach(m => {
            const type = m.getElement().dataset.type || m.getElement().getAttribute('data-type');
            console.log(' - ' + type);
        });
        
        // First hide all markers
        markers.forEach(function(marker) {
            marker.getElement().style.display = 'none';
        });
        
        // Show only matching markers
        let foundMatchingMarkers = false;
        markers.forEach(function(marker) {
            const markerElement = marker.getElement();
            // Try multiple ways to get type to handle different browsers
            const markerType = markerElement.dataset.type || 
                             markerElement.getAttribute('data-type');
            
            console.log('Checking marker:', markerType, 'against selected:', selectedType);
                
            if (markerType === selectedType) {
                console.log('✓ Showing marker for:', markerType);
                markerElement.style.display = 'block';
                markerElement.style.animation = 'bounce 0.5s';
                setTimeout(function() {
                    markerElement.style.animation = '';
                }, 500);
                foundMatchingMarkers = true;
            }
        });
        
        if (!foundMatchingMarkers) {
            console.warn('No matching markers found for type:', selectedType);
            // As a fallback, if no markers are found, try case-insensitive comparison
            markers.forEach(function(marker) {
                const markerElement = marker.getElement();
                const markerType = (markerElement.dataset.type || 
                                 markerElement.getAttribute('data-type') || '').toLowerCase();
                
                if (markerType === selectedType.toLowerCase()) {
                    console.log('✓ Showing marker using case-insensitive match:', markerType);
                    markerElement.style.display = 'block';
                    foundMatchingMarkers = true;
                }
            });
        }
        
        // If we're in list view, scroll to top of the filtered results
        if (document.querySelector('.js-list-view-container').style.display === 'block') {
            window.scrollTo({ top: document.querySelector('.js-list-view-container').offsetTop - 100, behavior: 'smooth' });
        }
    }
    
    // Function to clear activity filter
    function clearActivityFilter() {
        // Reset all filter styles
        document.querySelectorAll('.item-filter').forEach(function(filter) {
            filter.classList.remove('active');
            const type = filter.getAttribute('data-type');
            filter.style.backgroundColor = getColorForType(type) + '15';
        });
        
        // Also reset the dropdown if it exists
        const dropdown = document.querySelector('#activityTypeFilter');
        if (dropdown) dropdown.value = 'all';
        
        // Show all activity cards with animation
        document.querySelectorAll('.map-activity-card').forEach(function(card) {
            card.style.transition = 'opacity 0.3s ease';
            card.style.opacity = '1';
            card.style.display = 'block';
        });
        
        // Show all markers with subtle animation
        map.getContainer().querySelectorAll('.mapboxgl-marker').forEach(function(marker) {
            marker.style.transition = 'transform 0.3s ease';
            marker.style.transform = 'scale(1.1)';
            marker.style.display = 'block';
            
            setTimeout(function() {
                marker.style.transform = 'scale(1)';
            }, 300);
        });
    }
    
    // Helper function to get color for activity type
    function getColorForType(type) {
        const colorMap = {
            'Adventure': '#4CAF50',
            'Cultural': '#9C27B0',
            'Romantic': '#e91e63',
            'Educational': '#ff9800',
            'Sport': '#2196f3',
            'Food': '#FF5722',
            'Nature': '#009688',
            'Relaxation': '#03a9f4',
            'Beach': '#FFC107'
        };
        return colorMap[type] || '#607d8b';
    }
    
    // Handle all filter dropdowns
    document.querySelectorAll('.js-filter-by-type, #activityTypeFilter').forEach(dropdown => {
        dropdown.addEventListener('change', function() {
            let selectedType = this.value;
            // Update other dropdowns to maintain sync
            document.querySelectorAll('.js-filter-by-type, #activityTypeFilter').forEach(otherDropdown => {
                if (otherDropdown !== this) {
                    otherDropdown.value = selectedType;
                }
            });
            
            // Also update the category buttons UI
            document.querySelectorAll('.item-filter').forEach(filter => {
                filter.classList.remove('active');
                const type = filter.getAttribute('data-type');
                filter.style.backgroundColor = getColorForType(type) + '15';
                
                if (type === selectedType) {
                    filter.classList.add('active');
                    filter.style.backgroundColor = getColorForType(type) + '30';
                }
            });
            
            if (selectedType === '' || selectedType === 'all') {
                clearActivityFilter();
            } else {
                selectTypeFilter(selectedType);
            }
        });
    });
    
    // Add markers when map loads
    map.on('load', function() {
        console.log('Map loaded, adding 3D terrain and markers...');
        
        // Add 3D terrain
        map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });
        
        // Add the DEM source as a terrain layer with sky layer
        map.addSource('mapbox-dem', {
            'type': 'raster-dem',
            'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
            'tileSize': 512,
            'maxzoom': 14
        });
        
        // Add a sky layer that will show when the map is highly pitched
        map.addLayer({
            'id': 'sky',
            'type': 'sky',
            'paint': {
                'sky-type': 'atmosphere',
                'sky-atmosphere-sun': [0.0, 0.0],
                'sky-atmosphere-sun-intensity': 15
            }
        });
        
        // Set up 3D controls
        document.getElementById('toggle3D').addEventListener('click', function() {
            const is3D = this.classList.contains('active');
            if (is3D) {
                // Switch to 2D
                map.easeTo({ pitch: 0, bearing: 0 });
                this.classList.remove('active');
                this.textContent = '2D View';
            } else {
                // Switch to 3D
                map.easeTo({ pitch: 60, bearing: 0 });
                this.classList.add('active');
                this.textContent = '3D View';
            }
        });
        
        document.getElementById('rotate-left').addEventListener('click', function() {
            map.easeTo({ bearing: map.getBearing() - 30 });
        });
        
        document.getElementById('rotate-right').addEventListener('click', function() {
            map.easeTo({ bearing: map.getBearing() + 30 });
        });
        
        document.getElementById('tilt-up').addEventListener('click', function() {
            const currentPitch = map.getPitch();
            map.easeTo({ pitch: Math.min(currentPitch + 10, 85) });
        });
        
        document.getElementById('tilt-down').addEventListener('click', function() {
            const currentPitch = map.getPitch();
            map.easeTo({ pitch: Math.max(currentPitch - 10, 0) });
        });
        
        document.getElementById('reset-view').addEventListener('click', function() {
            map.easeTo({ 
                center: [9.5375, 33.8869],
                zoom: 7,
                pitch: 60, 
                bearing: 0
            });
        });
        
        // Clear markers array to avoid duplicates
        markers = [];
        activities.forEach(function(activity) {
            // Skip if no valid coordinates
            if (!activity.latitude || !activity.longitude || 
                isNaN(parseFloat(activity.latitude)) || isNaN(parseFloat(activity.longitude)) ||
                parseFloat(activity.latitude) === 0 || parseFloat(activity.longitude) === 0) {
                console.log('Skipping activity with invalid coordinates:', activity.activity_name);
                return;
            }
            
            // Log coordinates for debugging
            console.log('Plotting activity:', activity.activity_name, 
                      'at coordinates:', parseFloat(activity.longitude), parseFloat(activity.latitude));
            
            // Create marker element
            var el = createMarkerElement(activity.activity_genre, activity.activity_id);
            
            // Create popup
            var popup = new mapboxgl.Popup({
                offset: 25,
                closeButton: false,
                maxWidth: '300px'
            }).setHTML(createPopupContent(activity));
            
            // Create marker with popup
            var marker = new mapboxgl.Marker(el)
                .setLngLat([parseFloat(activity.longitude), parseFloat(activity.latitude)])
                .setPopup(popup)
                .addTo(map);
                
            // Add to global markers array for filtering
            markers.push(marker);
            
            // Show popup on hover
            el.addEventListener('mouseenter', function() {
                popup.addTo(map);
            });
            
            el.addEventListener('mouseleave', function() {
                popup.remove();
            });
            
            // Navigate to details on click
            el.addEventListener('click', function(event) {
                window.location.href = '/client/activities/' + activity.activity_id.toString();
            });
        });
        
        // Add interactivity to activity cards
        document.querySelectorAll('.map-activity-card').forEach(function(card) {
            var activityId = card.getAttribute('data-id');
            card.addEventListener('mouseenter', function() {
                // Highlight the corresponding marker
                activities.forEach(function(activity, index) {
                    if (activity.activity_id.toString() === activityId && markers[index]) {
                        markers[index].getElement().style.transform = 'scale(1.3)';
                        markers[index].getElement().style.zIndex = '999';
                    }
                });
            });
            
            card.addEventListener('mouseleave', function() {
                // Reset marker highlight
                activities.forEach(function(activity, index) {
                    if (activity.activity_id.toString() === activityId && markers[index]) {
                        markers[index].getElement().style.transform = '';
                        markers[index].getElement().style.zIndex = '';
                    }
                });
            });
            
            // Fly to marker when clicking on a card's location
            var locationIcon = card.querySelector('.map-activity-card__location');
            if (locationIcon) {
                locationIcon.style.cursor = 'pointer';
                locationIcon.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Switch to map view
                    mapViewButton.click();
                    
                    // Find the activity and fly to it
                    activities.forEach(function(activity) {
                        if (activity.activity_id.toString() === activityId) {
                            map.flyTo({
                                center: [parseFloat(activity.longitude), parseFloat(activity.latitude)],
                                zoom: 14,
                                essential: true
                            });
                            
                            // Show popup for this marker
                            markers.forEach(function(marker, index) {
                                if (activities[index] && activities[index].activity_id.toString() === activityId) {
                                    setTimeout(function() {
                                        marker.togglePopup();
                                    }, 1000);
                                }
                            });
                        }
                    });
                });
            }
        });
    });
    
    // Make sure the map is sized correctly when loaded
    map.on('load', function() {
        console.log('Map loaded event triggered');
        setTimeout(function() {
            map.resize();
            console.log('Map resized');
        }, 200);
    });
    
    // Fallback to ensure map is displayed
    setTimeout(function() {
        if (map) {
            console.log('Fallback resize triggered');
            map.resize();
        }
    }, 1000);
});
</script>
{% endblock %}
