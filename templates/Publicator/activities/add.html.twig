{% extends 'PubBase.html.twig' %}

{% block title %}Add New Activity{% endblock %}

{% block body %}
<div class="row y-gap-20 justify-between items-end pb-30 lg:pb-20 md:pb-16">
    <div class="col-auto">
        <div class="d-flex items-center mb-10">
            <div class="icon-circle bg-blue-1-05 text-blue-1 size-60 rounded-full flex-center mr-15">
                <i class="icon-route text-24"></i>
            </div>
            <div>
                <h1 class="text-30 lh-14 fw-600">Add New Activity</h1>
                <div class="text-15 text-light-1 mt-5">Create a new travel activity for your travelers</div>
            </div>
        </div>
    </div>
    <div class="col-auto">
        <a href="{{ path('app_publicator_activities') }}" class="button h-50 px-24 -blue-1 bg-blue-1-05 text-blue-1 rounded-8 hover-shadow-blue">
            <i class="icon-arrow-left mr-10"></i>
            Back to Activities
        </a>
    </div>
</div>

{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert {% if label == 'success' %}alert-success{% else %}alert-danger{% endif %} mb-30 fade-in">
            <div class="px-20 py-20 bg-{% if label == 'success' %}green-1{% else %}red-1{% endif %} text-white rounded-8">
                <div class="row x-gap-10 y-gap-10 items-center">
                    <div class="col-auto">
                        <div class="d-flex items-center">
                            <i class="icon-{% if label == 'success' %}check{% else %}close{% endif %} text-20 mr-10"></i>
                            <div class="fw-500">{{ message }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endfor %}
{% endfor %}

<div class="py-40 px-40 rounded-12 bg-white shadow-3 fade-in" style="border: 1px solid rgba(230, 230, 230, 0.7);">
    <!-- Progress Steps -->
    <div class="row justify-center mb-20">
        <div class="col-12">
            <div class="progress-wrapper">
                <div class="progress-item active">
                    <div class="progress-circle">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146ZM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5Z"/>
                        </svg>
                    </div>
                    <div class="progress-text">Basic Info</div>
                </div>
                <div class="progress-line active"></div>
                <div class="progress-item active">
                    <div class="progress-circle">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                        </svg>
                    </div>
                    <div class="progress-text">Details</div>
                </div>
                <div class="progress-line active"></div>
                <div class="progress-item active">
                    <div class="progress-circle">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                            <path d="M2.002 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-12zm12 1a1 1 0 0 1 1 1v6.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12V3a1 1 0 0 1 1-1h12z"/>
                        </svg>
                    </div>
                    <div class="progress-text">Images</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Form Intro -->
    <div class="row mb-20">
        <div class="col-12">
            <div class="bg-blue-1-05 rounded-8 py-15 px-20 mb-20">
                <div class="row">
                    <div class="col-auto">
                        <div class="bg-white rounded-full size-50 flex-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#3554D1" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="col">
                        <h4 class="text-18 fw-500 mb-5">Activity Information</h4>
                        <p class="text-15 lh-16">Complete all fields marked with an asterisk (*). The more details you provide, the better the visibility of your activity will be to travelers.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    
    
    {{ form_start(form, {'attr': {'id': 'activity-form', 'class': 'row y-gap-20', 'enctype': 'multipart/form-data'}}) }}
    
    <!-- Basic Information Section -->
    <div class="row y-gap-20 mb-30">
        <div class="col-12">
            <div class="py-30 px-30 rounded-12 bg-white shadow-3 border-light fade-in">
                <div class="row">
                    <div class="col-12 mb-20">
                        <div class="d-flex">
                            <div class="size-50 flex-center bg-blue-1 rounded-full mr-15 text-white">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 16 16">
                                    <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146ZM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5Z"/>
                                </svg>
                            </div>
                            <div>
                                <h3 class="text-18 fw-600">Basic Information</h3>
                                <p class="text-14 text-light-1 mt-5">The essential details about your activity</p>
                            </div>
                        </div>
                        <div class="mt-15">
                            <div class="border-top-light"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Form fields -->
                <div class="row x-gap-20 y-gap-20">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Activity Name <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-bookmark text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_name, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'Enter activity name'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_name) }}</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Destination <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-map-pin text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_destination, {'attr': {'class': 'form-select rounded-8 px-20 py-15 border-light input-border-focus pl-45'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_destination) }}</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Genre <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-category text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_genre, {'attr': {'class': 'form-select rounded-8 px-20 py-15 border-light input-border-focus pl-45'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_genre) }}</div>
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Description <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap position-absolute" style="top: 15px;">
                                    <i class="icon-message text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_description, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'Enter detailed description of your activity', 'rows': '4', 'style': 'min-height: 120px;'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_description) }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Details Section -->
    <div class="row y-gap-20 mb-30">
        <div class="col-12">
            <div class="py-30 px-30 rounded-12 bg-white shadow-3 border-light fade-in">
                <div class="row">
                    <div class="col-12 mb-20">
                        <div class="d-flex">
                            <div class="size-50 flex-center bg-green-1 rounded-full mr-15 text-white">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                                </svg>
                            </div>
                            <div>
                                <h3 class="text-18 fw-600">Activity Details</h3>
                                <p class="text-14 text-light-1 mt-5">Define timing, duration and capacity details</p>
                            </div>
                        </div>
                        <div class="mt-15">
                            <div class="border-top-light"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Timing and participant details -->
                <div class="row x-gap-20 y-gap-20">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Activity Date</label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-calendar text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_date, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'type': 'date'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_date) }}</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Maximum Participants <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-user text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.max_number, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'type': 'number', 'min': '1'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.max_number) }}</div>
                            <small class="text-light-1 mt-5 d-block">Maximum number of participants allowed</small>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Duration <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-clock text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_duration, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'e.g. 2 hours'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_duration) }}</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-dollar text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.activity_price, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'e.g. 99.99'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.activity_price) }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Location Section -->
    <div class="row y-gap-20 mb-30">
        <div class="col-12">
            <div class="py-30 px-30 rounded-12 bg-white shadow-3 border-light fade-in">
                <div class="row">
                    <div class="col-12 mb-20">
                        <div class="d-flex">
                            <div class="size-50 flex-center bg-yellow-4 rounded-full mr-15 text-dark-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#333333" viewBox="0 0 16 16">
                                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                                </svg>
                            </div>
                            <div>
                                <h3 class="text-18 fw-600">Activity Location</h3>
                                <p class="text-14 text-light-1 mt-5">Set the exact coordinates for your activity</p>
                            </div>
                        </div>
                        <div class="mt-15">
                            <div class="border-top-light"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Coordinates -->
                <div class="row x-gap-20 y-gap-20">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Latitude <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-map-pin text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.latitude, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'e.g. 36.7128', 'id': 'activity_lat'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.latitude) }}</div>
                            <small class="text-light-1">Must be between -90 and 90</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Longitude <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <div class="input-icon-wrap">
                                    <i class="icon-map-pin text-16 text-light-1"></i>
                                </div>
                                {{ form_widget(form.longitude, {'attr': {'class': 'form-control rounded-8 px-20 py-15 border-light input-border-focus pl-45', 'placeholder': 'e.g. -122.4194', 'id': 'activity_lng'}}) }}
                            </div>
                            <div class="text-red-1 mt-5">{{ form_errors(form.longitude) }}</div>
                            <small class="text-light-1">Must be between -180 and 180</small>
                        </div>
                    </div>
                    
                    <div class="col-12 mt-10">
                        <div class="bg-blue-1-05 rounded-8 px-20 py-15">
                            <div class="d-flex">
                                <div class="size-40 flex-center bg-white rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#3554D1" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                    </svg>
                                </div>
                                <div class="ml-15">
                                    <p class="text-14 lh-15">To find coordinates: Use Google Maps, right-click on your location and select "What's here?". The coordinates will appear at the bottom of the screen.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Map Preview -->
                    <div class="col-12 mt-20">
                        <div id="map-preview" class="rounded-8 border-light overflow-hidden" style="height: 250px; display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Images Section -->
    <div class="row y-gap-20 mb-30">
        <div class="col-12">
            <div class="py-30 px-30 rounded-12 bg-white shadow-3 border-light fade-in">
                <div class="row">
                    <div class="col-12 mb-20">
                        <div class="d-flex">
                            <div class="size-50 flex-center bg-purple-1 rounded-full mr-15 text-white">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 16 16">
                                    <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                                    <path d="M2.002 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-12zm12 1a1 1 0 0 1 1 1v6.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12V3a1 1 0 0 1 1-1h12z"/>
                                </svg>
                            </div>
                            <div>
                                <h3 class="text-18 fw-600">Activity Images</h3>
                                <p class="text-14 text-light-1 mt-5">Upload high-quality images of your activity</p>
                            </div>
                        </div>
                        <div class="mt-15">
                            <div class="border-top-light"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Image Upload -->
                <div class="row x-gap-20 y-gap-20">
                    <div class="col-12">
                        <div class="upload-container bg-blue-1-05 rounded-12 py-25 px-25 text-center">
                            <div class="d-flex justify-center items-center flex-column">
                                <div class="size-80 flex-center bg-white rounded-full mb-20 shadow-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="#3554D1" viewBox="0 0 16 16">
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                                    </svg>
                                </div>
                                <div class="text-18 fw-500 mb-10">Upload Activity Images</div>
                                <div class="text-center text-15 text-light-1 mb-20">Click button to upload your activity images</div>
                                
                                <style>
                                    .file-upload-btn {
                                        position: relative;
                                        overflow: hidden;
                                        display: inline-flex;
                                        align-items: center;
                                        cursor: pointer;
                                    }
                                    .file-upload-btn input[type=file] {
                                        position: absolute;
                                        font-size: 100px;
                                        opacity: 0;
                                        right: 0;
                                        top: 0;
                                        cursor: pointer;
                                    }
                                </style>
                                <div class="d-flex justify-center">
                                    <div class="file-upload-btn button h-50 px-30 -dark-1 bg-blue-1 text-white rounded-8 shadow-1">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="mr-10" viewBox="0 0 16 16">
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                                        </svg>
                                        Select Images
                                        {{ form_widget(form.activity_images, {'attr': {'multiple': true, 'accept': 'image/*'}}) }}
                                    </div>
                                </div>
                                <div id="imageCountContainer" class="mt-15">
                                    <span class="text-blue-1 fw-500">No file selected</span>
                                </div>
                                
                                <!-- Image Previews Container -->
                                <div id="previewsContainer" class="row mt-25 px-10 g-20"></div>
                                

                            </div>
                        </div>
                        
                        <div id="previewsContainer" class="row x-gap-15 y-gap-15 pt-20"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Submit Section -->
    <div class="row y-gap-20 mb-30">
        <div class="col-12">
            <div class="py-30 px-30 rounded-12 bg-white shadow-3 border-light fade-in">
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-column justify-center items-center">
                            <button type="submit" id="submitActivityBtn" class="button h-60 px-50 -dark-1 bg-blue-1 text-white rounded-8 shadow-1" onclick="document.getElementById('activity-form').submit();">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="mr-15" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                                </svg>
                                <span class="fw-500 text-16">Create Activity</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    {{ form_end(form) }}
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
<script>
    // Define function globally
    let imageUpload, countSpan, imageCountContainer, previewsContainer;
    
    // Debug function
    function debug(msg) {
        console.log('Debug:', msg);
    }
    
    document.addEventListener('DOMContentLoaded', function () {
        debug('DOM loaded');
        
        // Manual file input handler
        const manualFileInput = document.getElementById('manual_file_input');
        const formFileInput = document.querySelector('input[name="activity[activity_images][]"]');
        
        if (manualFileInput && formFileInput) {
            debug('File inputs found and connected');
            manualFileInput.addEventListener('change', function() {
                if (this.files && this.files.length > 0) {
                    debug(`Selected ${this.files.length} files`);
                    
                    // Show count in the UI
                    const countSpan = document.querySelector('#imageCountContainer span');
                    if (countSpan) {
                        countSpan.textContent = `${this.files.length} file(s) selected`;
                        document.getElementById('imageCountContainer').style.display = 'block';
                    }
                    
                    // Show previews
                    showFilePreviews(this.files);
                    
                    // This is just for display - the actual form will submit the files from the manual input
                    // No need to transfer to the Symfony form widget
                }
            });
        } else {
            debug('File inputs not found:', {
                manual: !!manualFileInput,
                form: !!formFileInput
            });
        }
        
        // Function to show file previews
        function showFilePreviews(files) {
            const previewsContainer = document.getElementById('previewsContainer');
            if (!previewsContainer) return;
            
            previewsContainer.innerHTML = '';
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                if (file.type.match('image.*')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const previewCol = document.createElement('div');
                        previewCol.className = 'col-md-3 col-sm-6 mb-15';
                        
                        const previewCard = document.createElement('div');
                        previewCard.className = 'border rounded-8 p-10 h-100 d-flex flex-column shadow-sm hover-shadow-blue';
                        
                        const previewImg = document.createElement('img');
                        previewImg.src = e.target.result;
                        previewImg.className = 'w-100 rounded-4';
                        previewImg.style.height = '120px';
                        previewImg.style.objectFit = 'cover';
                        
                        const imageName = document.createElement('div');
                        imageName.className = 'text-14 mt-10 fw-500 text-truncate';
                        imageName.textContent = file.name;
                        
                        const imageSize = document.createElement('div');
                        imageSize.className = 'text-12 text-light-1';
                        imageSize.textContent = Math.round(file.size / 1024) + ' KB';
                        
                        previewCard.appendChild(previewImg);
                        previewCard.appendChild(imageName);
                        previewCard.appendChild(imageSize);
                        
                        previewCol.appendChild(previewCard);
                        previewsContainer.appendChild(previewCol);
                    };
                    
                    reader.readAsDataURL(file);
                }
            }
        }
        // Get form elements
        const form = document.getElementById('activity-form');
        const latInput = document.getElementById('activity_lat');
        const lngInput = document.getElementById('activity_lng');
        const nameInput = document.getElementById('activity_activity_name');
        const descInput = document.getElementById('activity_activity_description');
        const priceInput = document.getElementById('activity_activity_price');
        const requiredInputs = document.querySelectorAll('input[required], select[required], textarea[required]');
        const imageUpload = document.getElementById('activity_images');
        const previewsContainer = document.getElementById('previewsContainer');
        const imageCountContainer = document.getElementById('imageCountContainer');
        const countSpan = imageCountContainer?.querySelector('span');
        
        // Handle file selection preview
        const fileInput = document.querySelector('input[type="file"][multiple]');
        if (fileInput) {
            debug('Found file input, setting up listener');
            fileInput.addEventListener('change', function() {
                // Update file count
                const countSpan = document.querySelector('#imageCountContainer span');
                if (countSpan) {
                    if (this.files.length > 0) {
                        countSpan.textContent = `${this.files.length} file(s) selected`;
                    } else {
                        countSpan.textContent = 'No file selected';
                    }
                }
                
                // Show previews
                const previewsContainer = document.getElementById('previewsContainer');
                if (previewsContainer) {
                    previewsContainer.innerHTML = '';
                    
                    for (let i = 0; i < this.files.length; i++) {
                        const file = this.files[i];
                        if (!file.type.match('image.*')) continue;
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const col = document.createElement('div');
                            col.className = 'col-md-4 col-sm-6 mb-20';
                            
                            col.innerHTML = `
                                <div class="border rounded-8 p-15 h-100 d-flex flex-column shadow-sm hover-shadow-blue">
                                    <img src="${e.target.result}" class="w-100 rounded-4" style="height: 180px; object-fit: cover;">
                                    <div class="text-14 mt-15 fw-500 text-truncate">${file.name}</div>
                                    <div class="text-12 text-light-1">${Math.round(file.size / 1024)} KB</div>
                                </div>
                            `;
                            
                            previewsContainer.appendChild(col);
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });
        } else {
            debug('File input not found');
        }
        
        // Initialize Mapbox
        mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';
        let map = null;
        
        // Check if coordinates exist on page load and show map
        setTimeout(() => {
            debug('Checking for initial coordinates');
            // Always set demo coordinates for testing
            if (latInput && lngInput) {
                debug('Setting test coordinates');
                latInput.value = 36.8065;
                lngInput.value = 10.1815;
                updateMap();
            }
        }, 1000);
        
        // Update map when coordinates change
        function updateMap() {
            debug('updateMap called');
            const lat = parseFloat(latInput.value);
            const lng = parseFloat(lngInput.value);
            const mapPreview = document.getElementById('map-preview');
            
            debug(`Coordinates: ${lat}, ${lng}`);
            
            if (!isNaN(lat) && !isNaN(lng) && lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180) {
                // Show map container
                mapPreview.style.display = 'block';
                
                // Initialize map if not already done
                if (!map) {
                    debug('Creating new map');
                try {
                    map = new mapboxgl.Map({
                        container: 'map-preview',
                        style: 'mapbox://styles/mapbox/streets-v12',
                        center: [lng, lat],
                        zoom: 12
                    });
                    debug('Map created successfully');
                    
                    // Force a resize after map is created
                    setTimeout(() => {
                        if (map) {
                            map.resize();
                            debug('Map resized');
                        }
                    }, 500);
                } catch (e) {
                    debug('Error creating map: ' + e.message);
                }
                    
                    // Add marker
                    new mapboxgl.Marker()
                        .setLngLat([lng, lat])
                        .addTo(map);
                    
                    // Add navigation controls
                    map.addControl(new mapboxgl.NavigationControl());
                } else {
                    // Update existing map
                    map.setCenter([lng, lat]);
                    
                    // Remove existing markers
                    const markers = document.querySelectorAll('.mapboxgl-marker');
                    markers.forEach(marker => marker.remove());
                    
                    // Add new marker
                    new mapboxgl.Marker()
                        .setLngLat([lng, lat])
                        .addTo(map);
                }
            } else {
                // Hide map if coordinates are invalid
                mapPreview.style.display = 'none';
            }
        }
        
        // Add validation classes on input
        requiredInputs.forEach(input => {
            input.addEventListener('blur', function() {
                if (!this.value || this.value.trim() === '') {
                    this.classList.add('is-invalid');
                    this.classList.remove('is-valid');
                } else {
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                }
            });
            
            input.addEventListener('input', function() {
                if (this.value && this.value.trim() !== '') {
                    this.classList.remove('is-invalid');
                }
            });
        });
        
        // Set up form submission handler
        if (form) {
            form.addEventListener('submit', function(e) {
                // Check all required fields
                let valid = true;
                let firstInvalidElement = null;
                
                requiredInputs.forEach(input => {
                    if (!input.value || input.value.trim() === '') {
                        input.classList.add('is-invalid');
                        valid = false;
                        
                        if (!firstInvalidElement) {
                            firstInvalidElement = input;
                        }
                    } else {
                        input.classList.remove('is-invalid');
                        input.classList.add('is-valid');
                    }
                });
                
                // Specifically validate coordinates
                if (latInput && lngInput) {
                    if (!latInput.value || latInput.value.trim() === '') {
                        latInput.classList.add('is-invalid');
                        valid = false;
                        if (!firstInvalidElement) {
                            firstInvalidElement = latInput;
                        }
                    } else {
                        const lat = parseFloat(latInput.value);
                        if (isNaN(lat) || lat < -90 || lat > 90) {
                            latInput.classList.add('is-invalid');
                            valid = false;
                            if (!firstInvalidElement) {
                                firstInvalidElement = latInput;
                            }
                        }
                    }
                    
                    if (!lngInput.value || lngInput.value.trim() === '') {
                        lngInput.classList.add('is-invalid');
                        valid = false;
                        if (!firstInvalidElement) {
                            firstInvalidElement = lngInput;
                        }
                    } else {
                        const lng = parseFloat(lngInput.value);
                        if (isNaN(lng) || lng < -180 || lng > 180) {
                            lngInput.classList.add('is-invalid');
                            valid = false;
                            if (!firstInvalidElement) {
                                firstInvalidElement = lngInput;
                            }
                        }
                    }
                }
                
                if (!valid) {
                    // Show error message
                    Swal.fire({
                        title: 'Form Validation Error',
                        text: 'Please fill in all required fields correctly.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3554D1'
                    });
                    
                    // Scroll to first invalid input
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                } else {
                    // Show loading state on the button
                    const submitBtn = document.getElementById('submitActivityBtn');
                    if (submitBtn) {
                        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm mr-10" role="status" aria-hidden="true"></span> Creating Activity...';
                        submitBtn.disabled = true;
                    }
                    
                    // Let the form submit normally
                    return true;
                }
            });
        }
        
        // Also validate coordinates as user types
        if (latInput && lngInput) {
            [latInput, lngInput].forEach(input => {
                input.addEventListener('input', function() {
                    const value = parseFloat(this.value);
                    const isLat = this.id === 'activity_lat';
                    
                    if (!isNaN(value)) {
                        const min = isLat ? -90 : -180;
                        const max = isLat ? 90 : 180;
                        
                        if (value >= min && value <= max) {
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        } else {
                            this.classList.add('is-invalid');
                            this.classList.remove('is-valid');
                        }
                    } else {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    }
                    
                    // Update map when coordinates change
                    if (latInput.value && lngInput.value) {
                        debug(`Coordinates changed: ${latInput.value}, ${lngInput.value}`);
                        updateMap();
                    }
                    
                    // Reset validation after 3 seconds
                    setTimeout(() => {
                        this.classList.remove('is-valid');
                    }, 3000);
                });
            });
        }
        
        // Image upload handling
        if (imageUpload) {
            imageUpload.addEventListener('change', function() {
                // Clear previous previews
                if (previewsContainer) previewsContainer.innerHTML = '';
                
                if (this.files && this.files.length > 0 && countSpan) {
                    countSpan.textContent = `${this.files.length} file(s) selected`;
                    imageCountContainer.classList.remove('d-none');
                    
                    // Add green border to input to show success
                    this.classList.add('is-valid');
                    
                    // Reset validation after 3 seconds
                    setTimeout(() => {
                        this.classList.remove('is-valid');
                    }, 3000);
                    
                    // Create preview for each selected file
                    for (let i = 0; i < this.files.length; i++) {
                        const file = this.files[i];
                        
                        if (file.type.match('image.*')) {
                            const reader = new FileReader();
                            
                            reader.onload = function(e) {
                                if (!previewsContainer) return;
                                
                                const previewCol = document.createElement('div');
                                previewCol.className = 'col-md-3 col-sm-6 mb-15';
                                
                                const previewCard = document.createElement('div');
                                previewCard.className = 'border rounded-8 p-10 h-100 d-flex flex-column shadow-sm hover-shadow-blue';
                                
                                const previewImg = document.createElement('img');
                                previewImg.src = e.target.result;
                                previewImg.className = 'w-100 rounded-4';
                                previewImg.style.height = '120px';
                                previewImg.style.objectFit = 'cover';
                                
                                const imageName = document.createElement('div');
                                imageName.className = 'text-14 mt-10 fw-500 text-truncate';
                                imageName.textContent = file.name;
                                
                                const imageSize = document.createElement('div');
                                imageSize.className = 'text-12 text-light-1';
                                imageSize.textContent = Math.round(file.size / 1024) + ' KB';
                                
                                // Create a remove button
                                const removeBtn = document.createElement('button');
                                removeBtn.className = 'btn-sm mt-10 text-12 fw-500 text-red-1 bg-light-2 rounded-4 py-5 px-10 w-100';
                                removeBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" class="mr-5" viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"/><path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"/></svg> Remove';
                                removeBtn.type = 'button';
                                removeBtn.addEventListener('click', function() {
                                    previewCol.remove();
                                    // Update the file count
                                    const currentCount = previewsContainer.querySelectorAll('.col-md-3').length;
                                    if (currentCount === 0) {
                                        if (countSpan) countSpan.textContent = 'No file selected';
                                        if (imageCountContainer) imageCountContainer.classList.add('d-none');
                                    } else {
                                        if (countSpan) countSpan.textContent = `${currentCount} file(s) selected`;
                                    }
                                });
                                
                                previewCard.appendChild(previewImg);
                                previewCard.appendChild(imageName);
                                previewCard.appendChild(imageSize);
                                previewCard.appendChild(removeBtn);
                                
                                // Add animation class
                                previewCol.classList.add('fade-in');
                                
                                previewCol.appendChild(previewCard);
                                previewsContainer.appendChild(previewCol);
                            };
                            
                            reader.readAsDataURL(file);
                        }
                    }
                } else {
                    if (countSpan) countSpan.textContent = 'No file selected';
                    if (imageCountContainer) imageCountContainer.classList.add('d-none');
                }
            });
        }
    });
</script>
<style>
    /* Form styling */
    .form-control:focus,
    .form-select:focus {
        box-shadow: 0 0 0 3px rgba(53, 84, 209, 0.1) !important;
        border-color: var(--color-blue-1) !important;
    }
    
    .input-icon-wrap {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }
    
    .input-group {
        position: relative;
    }
    
    .pl-45 {
        padding-left: 45px !important;
    }
    
    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
    }
    
    .is-valid {
        border-color: #198754 !important;
        box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25) !important;
    }
    
    /* Image upload */
    .file-upload-container {
        position: relative;
        display: inline-block;
    }
    
    .d-none {
        display: none;
    }
    
    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
    
    /* Card styling */
    .card {
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.08);
        transform: translateY(-5px);
    }
    
    .card-header.bg-blue-1 {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }
    
    /* Button styling */
    .hover-shadow-blue:hover {
        box-shadow: 0 10px 20px rgba(53, 84, 209, 0.15);
    }
    
    .hover-shadow-dark:hover {
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    #submitActivityBtn {
        transition: all 0.3s ease;
    }
    
    #submitActivityBtn:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(53, 84, 209, 0.15);
    }
    
    /* Form elements */
    .form-group {
        margin-bottom: 5px;
    }
    
    .form-control, .form-select {
        transition: all 0.2s ease;
        border: 1px solid #e5e7eb;
    }
    
    .form-control:hover, .form-select:hover {
        border-color: var(--color-blue-1);
    }
    
    /* Progress indicator */
    .progress-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }
    
    .progress-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
    }
    
    .progress-circle {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: #f3f4f6;
        color: #9ca3af;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin-bottom: 8px;
        border: 2px solid #e5e7eb;
        transition: all 0.3s ease;
    }
    
    .progress-item.active .progress-circle {
        background-color: var(--color-blue-1);
        color: white;
        border-color: var(--color-blue-1);
    }
    
    .progress-line {
        width: 60px;
        height: 2px;
        background-color: #e5e7eb;
        margin: 0 10px;
        margin-top: -28px;
    }
    
    .progress-line.active {
        background-color: var(--color-blue-1);
    }
    
    .progress-text {
        font-size: 12px;
        color: #6b7280;
        font-weight: 500;
    }
    
    .progress-item.active .progress-text {
        color: var(--color-blue-1);
        font-weight: 600;
    }
    
    /* Image previews */
    #previewsContainer img {
        transition: all 0.3s ease;
    }
    
    #previewsContainer img:hover {
        transform: scale(1.05);
    }
    
    /* Overall page animation */
    .fade-in {
        animation: fadeInAnimation 0.6s ease forwards;
    }
    
    @keyframes fadeInAnimation {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Responsive handling */
    @media (max-width: 767px) {
        .py-40 {
            padding-top: 25px !important;
            padding-bottom: 25px !important;
        }
        
        .px-40 {
            padding-left: 20px !important;
            padding-right: 20px !important;
        }
    }
</style>
{% endblock %}
