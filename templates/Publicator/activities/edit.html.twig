{% extends 'PubBase.html.twig' %}

{% block title %}Edit Activity{% endblock %}

{% block body %}
<div class="row y-gap-20 justify-between items-end pb-60 lg:pb-40 md:pb-32">
    <div class="col-auto">
        <h1 class="text-30 lh-14 fw-600">Edit Activity</h1>
        <div class="text-15 text-light-1">Update your activity information</div>
    </div>
    <div class="col-auto">
        <a href="{{ path('app_publicator_activities') }}" class="button h-50 px-24 -blue-1-05 text-blue-1 hover-animation">
            <i class="icon-arrow-left mr-10"></i>
            Back to Activities
        </a>
    </div>
</div>

{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert {% if label == 'success' %}alert-success{% else %}alert-danger{% endif %} mb-30 fade-in">
            <div class="px-20 py-20 bg-{% if label == 'success' %}green-1{% else %}red-1{% endif %} text-white rounded-4">
                <div class="row x-gap-10 y-gap-10 items-center">
                    <div class="col-auto">
                        <div class="d-flex items-center">
                            <i class="icon-{% if label == 'success' %}check{% else %}close{% endif %} text-20 mr-10"></i>
                            <div class="fw-500">{{ message }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endfor %}
{% endfor %}

<div class="py-40 px-40 rounded-4 bg-white shadow-3 fade-in">
    <div class="row justify-center mb-30">
        <div class="col-auto">
            <div class="text-22 fw-600">Edit Activity</div>
            <div class="text-14 text-center text-light-1 mt-5">Update the details for "{{ activity.activityName }}"</div>
        </div>
    </div>
    
    {{ form_start(form, {'attr': {'class': 'row y-gap-30 justify-center', 'enctype': 'multipart/form-data', 'id': 'activity-form'}}) }}
    <div class="col-xl-9 col-lg-10">
        <div class="row x-gap-20 y-gap-30">
            <div class="col-12">
                {{ form_label(form.activity_name, 'Activity Name', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_name, {'attr': {'class': 'form-control h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_name) }}
                </div>
            </div>

            <div class="col-12">
                {{ form_label(form.activity_description, 'Description', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_description, {'attr': {'class': 'form-control bg-white rounded-4 border-light', 'rows': '5'}}) }}
                    {{ form_errors(form.activity_description) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.activity_destination, 'Destination', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_destination, {'attr': {'class': 'form-select h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_destination) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.activity_genre, 'Genre', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_genre, {'attr': {'class': 'form-select h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_genre) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.activity_duration, 'Duration', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_duration, {'attr': {'class': 'form-control h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_duration) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.activity_price, 'Price', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.activity_price, {'attr': {'class': 'form-control h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_price) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.activity_date, 'Activity Date', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <div class="mt-10">
                    {{ form_widget(form.activity_date, {'attr': {'class': 'form-control h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.activity_date) }}
                </div>
            </div>

            <div class="col-md-6">
                {{ form_label(form.max_number, 'Maximum Participants', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <span class="text-danger">*</span>
                <div class="mt-10">
                    {{ form_widget(form.max_number, {'attr': {'class': 'form-control h-50 bg-white rounded-4 border-light'}}) }}
                    {{ form_errors(form.max_number) }}
                    <small class="text-light-1">Maximum number of participants allowed</small>
                </div>
            </div>

            <div class="col-12">
                <div class="location-picker-container bg-light-2 rounded-4 px-20 py-20">
                    <h5 class="text-15 fw-500">Select Activity Location</h5>
                    <div id="mapbox-container" style="width: 100%; height: 350px;"></div>
                    
                    <div class="mt-10 d-flex flex-column">
                        <div id="coordinates-display" class="my-10 p-10 bg-blue-1 rounded-4 text-white">
                            <div class="fw-500">Selected Location:</div>
                            <div class="d-flex gap-10 mt-5">
                                <div class="flex-grow-1">
                                    <label class="form-label">Latitude</label>
                                    <input id="debug-lat" type="text" class="form-control" value="{{ activity.latitude|default('48.8566') }}">
                                </div>
                                <div class="flex-grow-1">
                                    <label class="form-label">Longitude</label>
                                    <input id="debug-lng" type="text" class="form-control" value="{{ activity.longitude|default('2.3522') }}">
                                </div>
                            </div>
                            <div class="mt-10">
                                <button type="button" id="update-from-debug" class="btn btn-sm btn-primary w-100">Set These Coordinates</button>
                            </div>
                        </div>
                        
                        <div id="debug-output" class="my-10 p-10 bg-dark-1 rounded-4 text-white" style="height: 100px; overflow-y: auto; font-family: monospace; font-size: 12px;">
                            Debug log will appear here...
                        </div>
                    </div>

                    <div class="d-none">
                        {{ form_widget(form.latitude, {'attr': {'id': 'hidden-latitude', 'name': 'activity_form[latitude]'}}) }}
                        {{ form_widget(form.longitude, {'attr': {'id': 'hidden-longitude', 'name': 'activity_form[longitude]'}}) }}
                    </div>
                </div>
            </div>

            <div class="col-12">
                <label class="text-16 lh-1 fw-500 text-dark-1 mb-10">Current Images</label>
                
                {% if resources is empty %}
                    <div class="py-15 px-20 rounded-4 text-center bg-light-2 border-light">
                        <div class="text-14 text-light-1">No images available for this activity</div>
                    </div>
                {% else %}
                    <div class="row x-gap-15 y-gap-15 mt-10">
                        {% for resource in resources %}
                            <div class="col-lg-3 col-md-4 col-sm-6">
                                <div class="rounded-4 border-light p-10 h-100 d-flex flex-column">
                                    <div class="w-100 h-100 flex-grow-1" style="min-height: 120px; max-height: 150px; overflow: hidden;">
                                        <img src="{{ asset(resource.path) }}" alt="Activity Image" class="w-100 h-100 object-cover rounded-4">
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center pt-10 mt-auto">
                                        <div class="text-14 text-light-1">Image #{{ loop.index }}</div>
                                        <div class="form-check">
                                            <input type="checkbox" name="delete_images[]" value="{{ resource.id }}" class="form-check-input delete-image-check">
                                            <label class="form-check-label text-14 text-danger">Delete</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <div class="col-12">
                {{ form_label(form.activity_images, 'Add More Images', {'label_attr': {'class': 'text-16 lh-1 fw-500 text-dark-1 mb-10'}}) }}
                <div class="mt-10 rounded-4 px-30 py-30 border border-light bg-white">
                    <div class="row y-gap-20">
                        <div class="col-12">
                            <div class="text-center">
                                <div class="size-60 flex-center bg-blue-1 rounded-full mx-auto mb-15">
                                    <i class="icon-cloud-upload text-white text-24"></i>
                                </div>
                                <div class="text-15 fw-500 mb-10">Upload Additional Images</div>
                                <div class="text-14 text-light-1">PNG or JPG format only</div>
                                <div class="mt-20">
                                    {{ form_widget(form.activity_images, {'attr': {'class': 'file-upload-input', 'id': 'imageUpload'}}) }}
                                    {{ form_errors(form.activity_images) }}
                                </div>
                            </div>
                            <div id="previewsContainer" class="row mt-30"></div>
                            <div id="imageCountContainer" class="text-center mt-15 d-none">
                                <span class="badge bg-blue-1 text-white py-10 px-20 rounded-full text-14"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="d-flex justify-center mt-40">
            <button type="submit" class="button h-60 px-40 -dark-1 bg-blue-1 text-white hover-animation">
                <i class="icon-check text-16 mr-15"></i>
                <span class="fw-500">Update Activity</span>
            </button>
        </div>
    </div>
    {{ form_end(form) }}
</div>
{% endblock %}

{% block javascripts %}
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Image upload handling elements
        const imageUpload = document.getElementById('imageUpload');
        const previewsContainer = document.getElementById('previewsContainer');
        const imageCountContainer = document.getElementById('imageCountContainer');
        const countSpan = imageCountContainer?.querySelector('span');
        
        // ========================
        // DEBUG OUTPUT - Remove any existing debug
        // ========================
        const debugOutput = document.getElementById('debug-output');
        if (debugOutput) {
            debugOutput.innerHTML = '';
        }
        
        // Create debug log function
        function logDebug(message) {
            console.log(message);
            if (debugOutput) {
                const now = new Date();
                const timeStr = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
                const logLine = document.createElement('div');
                logLine.textContent = `[${timeStr}] ${message}`;
                debugOutput.appendChild(logLine);
                debugOutput.scrollTop = debugOutput.scrollHeight;
            }
        }
        
        // Get form elements for coordinates
        const activityForm = document.getElementById('activity-form');
        const hiddenLatitude = document.getElementById('hidden-latitude');
        const hiddenLongitude = document.getElementById('hidden-longitude');
        
        // Get debug elements for direct input
        const debugLatInput = document.getElementById('debug-lat');
        const debugLngInput = document.getElementById('debug-lng');
        const updateFromDebugBtn = document.getElementById('update-from-debug');
        
        // ========================
        // MAP INITIALIZATION
        // ========================
        
        // Set API token
        logDebug('Setting Mapbox token...');
        mapboxgl.accessToken = "{{ app.request.server.get('MAPBOX_API')|default('pk.eyJ1IjoibmloZWR4dG4iLCJhIjoiY205cmNmNDZoMHc3bTJpczQ3b3FodWVibCJ9.MBPaL38J-sYOaaw2BUQO0Q') }}";
        
        // Initialize coordinates from input fields or default Paris coordinates
        let initialLat = parseFloat(debugLatInput.value) || 48.8566;
        let initialLng = parseFloat(debugLngInput.value) || 2.3522;
        let initialZoom = 12;
        
        // Update hidden fields with initial values
        if (hiddenLatitude && hiddenLongitude) {
            hiddenLatitude.value = initialLat.toFixed(6);
            hiddenLongitude.value = initialLng.toFixed(6);
            logDebug(`Initialized hidden fields: ${hiddenLatitude.value}, ${hiddenLongitude.value}`);
        }
        
        logDebug(`Creating map with center: ${initialLat}, ${initialLng}`);
        
        // Create map with initial coordinates
        const map = new mapboxgl.Map({
            container: 'mapbox-container',
            style: 'mapbox://styles/mapbox/satellite-streets-v12',
            center: [initialLng, initialLat],
            zoom: initialZoom,
            pitch: 45,
            bearing: 0
        });
        
        // ========================
        // COORDINATE HANDLING
        // ========================
        
        // Function to sync from map to form
        function syncCoordinatesFromMap() {
            if (!map || !map.getCenter) {
                logDebug('Error: Map not initialized properly');
                return;
            }
            
            try {
                const center = map.getCenter();
                const lat = center.lat.toFixed(6);
                const lng = center.lng.toFixed(6);
                
                logDebug(`Map center: ${lat}, ${lng}`);
                
                // Update visible inputs
                if (debugLatInput && debugLngInput) {
                    debugLatInput.value = lat;
                    debugLngInput.value = lng;
                    logDebug('Updated debug inputs');
                } else {
                    logDebug('Debug inputs not found');
                }
                
                // Update hidden form fields
                if (hiddenLatitude && hiddenLongitude) {
                    hiddenLatitude.value = lat;
                    hiddenLongitude.value = lng;
                    logDebug('Updated hidden fields');
                } else {
                    logDebug('Hidden fields not found');
                }
                
                return { lat, lng };
            } catch (e) {
                logDebug('Error getting map center: ' + e.message);
            }
        }
        
        // Update map from manually entered coordinates
        function syncMapFromInputs() {
            try {
                const lat = parseFloat(debugLatInput.value);
                const lng = parseFloat(debugLngInput.value);
                
                if (!isNaN(lat) && !isNaN(lng)) {
                    logDebug(`Moving map to: ${lat}, ${lng}`);
                    
                    map.flyTo({
                        center: [lng, lat],
                        zoom: 12
                    });
                    
                    // Update hidden form fields directly
                    if (hiddenLatitude && hiddenLongitude) {
                        hiddenLatitude.value = lat.toFixed(6);
                        hiddenLongitude.value = lng.toFixed(6);
                        logDebug('Updated hidden fields directly');
                    }
                    
                    // Update marker if it exists
                    if (marker) {
                        marker.setLngLat([lng, lat]);
                        logDebug('Updated marker position');
                    }
                } else {
                    logDebug('Invalid coordinates entered');
                }
            } catch (e) {
                logDebug('Error updating map: ' + e.message);
            }
        }
        
        // Force update hidden fields from debug fields
        function forceUpdateHiddenFields() {
            if (hiddenLatitude && hiddenLongitude && debugLatInput && debugLngInput) {
                try {
                    // Directly set values
                    hiddenLatitude.value = debugLatInput.value;
                    hiddenLongitude.value = debugLngInput.value;
                    
                    // Log what we've set
                    logDebug(`Force-updated hidden fields: ${hiddenLatitude.value}, ${hiddenLongitude.value}`);
                } catch (e) {
                    logDebug('Error force updating fields: ' + e.message);
                }
            }
        }
        
        // ========================
        // MAP SETUP AND EVENTS
        // ========================
        
        // Add basic controls
        logDebug('Adding map controls...');
        map.addControl(new mapboxgl.NavigationControl());
        
        // Create marker at initial coordinates
        const marker = new mapboxgl.Marker({
            color: "#FF0000",
            draggable: true
        }).setLngLat([initialLng, initialLat])
          .addTo(map);
          
        // Update coordinates when marker is dragged
        marker.on('dragend', function() {
            const lngLat = marker.getLngLat();
            debugLatInput.value = lngLat.lat.toFixed(6);
            debugLngInput.value = lngLat.lng.toFixed(6);
            forceUpdateHiddenFields();
            logDebug(`Marker dragged to: ${lngLat.lat.toFixed(6)}, ${lngLat.lng.toFixed(6)}`);
        });
        
        // Try to add geocoder search if MapboxGeocoder is available
        try {
            // Check if the MapboxGeocoder global is available before trying to use it
            if (typeof MapboxGeocoder !== 'undefined') {
                logDebug('Adding Mapbox geocoder...');
                const geocoder = new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl,
                    marker: false
                });
                map.addControl(geocoder);
                
                // Add event listener for geocoder results
                geocoder.on('result', function(e) {
                    logDebug('Geocoder result received');
                    marker.setLngLat(e.result.center);
                    setTimeout(function() {
                        const coords = syncCoordinatesFromMap();
                        logDebug(`Updated after geocoder: ${coords.lat}, ${coords.lng}`);
                    }, 500);
                });
            } else {
                logDebug('MapboxGeocoder not available, skipping geocoder');
            }
        } catch (e) {
            logDebug('Error initializing geocoder: ' + e.message);
        }
        
        // Map initialization and terrain
        map.on('load', function() {
            logDebug('Map loaded');
            
            try {
                // Add 3D terrain
                map.addSource('mapbox-dem', {
                    'type': 'raster-dem',
                    'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
                    'tileSize': 512,
                    'maxzoom': 14
                });
                
                map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });
                logDebug('3D terrain added');
            } catch (e) {
                logDebug('Error adding terrain: ' + e.message);
            }
            
            // Ensure initial sync from map
            const coords = syncCoordinatesFromMap();
            logDebug(`Initial coordinates set: ${coords?.lat}, ${coords?.lng}`);
            
            // Update marker position to match map center
            marker.setLngLat(map.getCenter());
        });
        
        // When map moves, update marker position
        map.on('move', function() {
            marker.setLngLat(map.getCenter());
        });
        
        // Update coordinates when map stops moving
        map.on('moveend', function() {
            const coords = syncCoordinatesFromMap();
            logDebug(`Map moved to: ${coords?.lat}, ${coords?.lng}`);
        });
        
        // ========================
        // BUTTON LISTENERS
        // ========================
        
        // Update coordinates from manual input
        if (updateFromDebugBtn) {
            updateFromDebugBtn.addEventListener('click', function() {
                logDebug('Manual update button clicked');
                syncMapFromInputs();
                forceUpdateHiddenFields();
            });
        }
        
        // Listen for direct input changes
        if (debugLatInput && debugLngInput) {
            debugLatInput.addEventListener('change', forceUpdateHiddenFields);
            debugLngInput.addEventListener('change', forceUpdateHiddenFields);
        }
        
        // ========================
        // FORM SUBMISSION
        // ========================
        
        // Handle form submission
        if (activityForm) {
            activityForm.addEventListener('submit', function(e) {
                // Final force update of hidden fields
                forceUpdateHiddenFields();
                
                // Get final values
                const finalLat = hiddenLatitude.value;
                const finalLng = hiddenLongitude.value;
                
                logDebug(`Form submission - Final coordinates: ${finalLat}, ${finalLng}`);
                
                // Ensure the form fields are valid for submission
                let isValid = true;
                let errorMessage = '';
                
                // Check for empty coordinates
                if (!finalLat || !finalLng) {
                    isValid = false;
                    errorMessage = 'Coordinates cannot be empty. Please select a location on the map.';
                    logDebug('ERROR: Empty coordinates detected');
                } 
                // Check for default Paris coordinates (only if not editing an existing activity with these coordinates)
                else if (finalLat === '48.8566' && finalLng === '2.3522' && 
                         (initialLat !== 48.8566 || initialLng !== 2.3522)) {
                    isValid = false;
                    errorMessage = 'Please select a specific location for your activity. The coordinates are still set to the default location.';
                    logDebug('ERROR: Default Paris coordinates detected');
                }
                // Check for default Tunisia coordinates
                else if (finalLat === '36.800000' && finalLng === '10.180000') {
                    isValid = false;
                    errorMessage = 'Please select a specific location for your activity. The coordinates are still set to the default Tunisia location.';
                    logDebug('ERROR: Default Tunisia coordinates detected');
                }
                
                // If form is not valid, prevent submission and show error
                if (!isValid) {
                    e.preventDefault();
                    alert(errorMessage);
                    return false;
                }
                
                // All checks passed, allow form submission
                logDebug('FORM SUBMISSION ALLOWED - Coordinates valid: ' + finalLat + ', ' + finalLng);
                
                // Double check that the hidden fields have been updated
                const formData = new FormData(activityForm);
                logDebug('FORM DATA: latitude=' + formData.get('activity_form[latitude]') + ', longitude=' + formData.get('activity_form[longitude]'));
                
                return true;
            });
        }
        
        // ========================
        // IMAGE DELETION HANDLING
        // ========================
        
        // Image deletion checkbox handling
        const deleteCheckboxes = document.querySelectorAll('.delete-image-check');
        deleteCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const imageCard = this.closest('.rounded-4');
                if (this.checked) {
                    imageCard.classList.add('border-danger');
                } else {
                    imageCard.classList.remove('border-danger');
                }
            });
        });
        
        // ========================
        // IMAGE UPLOAD HANDLING
        // ========================
        
        // Image upload handling
        if (imageUpload) {
            imageUpload.addEventListener('change', function() {
                // Clear previous previews
                if (previewsContainer) previewsContainer.innerHTML = '';
                
                if (this.files && this.files.length > 0 && countSpan) {
                    countSpan.textContent = `${this.files.length} file(s) selected`;
                    imageCountContainer.classList.remove('d-none');
                    
                    // Create preview for each selected file
                    for (let i = 0; i < this.files.length; i++) {
                        const file = this.files[i];
                        
                        if (file.type.match('image.*')) {
                            const reader = new FileReader();
                            
                            reader.onload = function(e) {
                                if (!previewsContainer) return;
                                
                                const previewCol = document.createElement('div');
                                previewCol.className = 'col-md-3 col-sm-6 mb-15';
                                
                                const previewCard = document.createElement('div');
                                previewCard.className = 'border rounded-4 p-10 h-100 d-flex flex-column';
                                
                                const previewImg = document.createElement('img');
                                previewImg.src = e.target.result;
                                previewImg.className = 'w-100 rounded-4';
                                previewImg.style.height = '100px';
                                previewImg.style.objectFit = 'cover';
                                
                                const imageName = document.createElement('div');
                                imageName.className = 'text-14 mt-5 text-center text-truncate';
                                imageName.textContent = file.name;
                                
                                previewCard.appendChild(previewImg);
                                previewCard.appendChild(imageName);
                                previewCol.appendChild(previewCard);
                                previewsContainer.appendChild(previewCol);
                            }
                            
                            reader.readAsDataURL(file);
                        }
                    }
                } else if (imageCountContainer) {
                    imageCountContainer.classList.add('d-none');
                }
            });
        }
    });
</script>
<style>
    /* Animation styles */
    .hover-animation {
        transition: all 0.3s ease;
    }
    
    .hover-animation:hover {
        transform: translateY(-3px);
    }
    
    /* Fade in animation */
    .fade-in {
        animation: fadeIn 0.6s ease forwards;
    }
    
    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    /* Form styling */
    .form-control,
    .form-select {
        transition: all 0.3s ease;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: var(--color-blue-1) !important;
        box-shadow: 0 0 0 3px rgba(5, 142, 199, 0.1);
    }
    
    .border-light {
        border: 1px solid #ddd;
    }
    
    /* Button styling */
    .button {
        transition: all 0.3s ease;
    }
    
    .button.-blue-1:hover {
        background-color: #0073cc !important;
    }
    
    /* File upload styling */
    .file-upload-container {
        position: relative;
        text-align: center;
        border: 2px dashed #ddd;
        border-radius: 8px;
        padding: 20px;
        background-color: #f9f9f9;
        transition: all 0.3s ease;
    }
    
    .file-upload-container:hover {
        border-color: var(--color-blue-1);
        background-color: #f0f7fc;
    }
    
    .file-upload-input {
        display: block;
        width: 100%;
        height: 100%;
        padding: 15px;
        cursor: pointer;
        font-size: 1rem;
    }
    
    .file-upload-input::file-selector-button {
        padding: 10px 20px;
        border-radius: 4px;
        border: none;
        background-color: var(--color-blue-1);
        color: white;
        font-weight: 500;
        cursor: pointer;
        margin-right: 15px;
        transition: all 0.3s ease;
    }
    
    .file-upload-input::file-selector-button:hover {
        background-color: #0073cc;
    }
    
    .border-top-light {
        border-top: 1px solid #eee;
    }
    
    .border-danger {
        border-color: #dc3545 !important;
        background-color: rgba(220, 53, 69, 0.05);
    }
</style>
{% endblock %}
